<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://zt-winter.github.io/atom.xml" rel="self"/>
  
  <link href="http://zt-winter.github.io/"/>
  <updated>2025-03-25T08:32:27.677Z</updated>
  <id>http://zt-winter.github.io/</id>
  
  <author>
    <name>月的奏鸣曲</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>证券分析阅读笔记</title>
    <link href="http://zt-winter.github.io/2025/03/25/securites-analysis/"/>
    <id>http://zt-winter.github.io/2025/03/25/securites-analysis/</id>
    <published>2025-03-24T16:00:00.000Z</published>
    <updated>2025-03-25T08:32:27.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="证券分析阅读笔记"><a href="#证券分析阅读笔记" class="headerlink" title="证券分析阅读笔记"></a>证券分析阅读笔记</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;证券分析阅读笔记&quot;&gt;&lt;a href=&quot;#证券分析阅读笔记&quot; class=&quot;headerlink&quot; title=&quot;证券分析阅读笔记&quot;&gt;&lt;/a&gt;证券分析阅读笔记&lt;/h1&gt;</summary>
      
    
    
    
    <category term="readnote" scheme="http://zt-winter.github.io/categories/readnote/"/>
    
    
    <category term="economy" scheme="http://zt-winter.github.io/tags/economy/"/>
    
    <category term="readnote" scheme="http://zt-winter.github.io/tags/readnote/"/>
    
  </entry>
  
  <entry>
    <title>天气预报</title>
    <link href="http://zt-winter.github.io/2023/07/25/%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/"/>
    <id>http://zt-winter.github.io/2023/07/25/%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/</id>
    <published>2023-07-24T16:00:00.000Z</published>
    <updated>2023-07-25T03:04:49.381Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="08ea411f485dc8667d7b78ff6c2661f6c35ae5037838f4414eba9f15ec6cd9d3">9abc167685c141e079bf3cb66a52d85633b48b310d02339f2dc2cbc8ad9a69c0079d8d9d2872727e2e7c7f3f1003fdd4ddc68757e09cfb48ef9051e8c934766345a49b4092e0171f4c8ecda56b06b13cf1923236e01de082d7900db36660264e9ae8a598425c20dd0e1f2ce2181d931a8714477a49348291dcff99f3205e08d5a62feb783598fdf0f0afa2cd443d054f5942c8a70dad75078e6f8261d73c17a12cf87702462caae38ec7e76b90b88ae1d1a6ac9d56a484deb7186460f13ee462dc412fe50c7d6b9d6f06c8db386e0c095bb0be0434b0452cd89570356b3679bb6ae63ae30eca85c2c8d0d7227efe6f08724a879067dd41294dea411a9300465404b02b00b9d78fc6c9724e02126bf66661eab739b1961a89bbd4dc98b2e5e85cd82ab03e0f3419072b89587753bf9be140bdd58b8bac5a31dcb399f8b1356eb9a9c2a96a6437fb5989e3bc4448487a4a762a403170142dc5fd5e709e107098b02ec99d62d1898e966d5b1f090c51d14f880cbd5d1e13c943956c9d992a8d2663217def554ae4eae8ff5c6654db891b8e1962610bed72fc7d0038903fd948ec8e7f49b7afc5681ee8bb929324caf58fd020971c962799912794a779fefbb3fd8db03b5d3d721c9ac5d9fa5278bb87868b50607d1671a7da1b48e367dbeb9492b3b6c35f5c54e52262f4b0ca3622e5b04a89f780167e6355a575f88b07d8fd1cfe499dc583ce8f4f2146f3a8711465fcf729119cf74c7a2fc4f62caf65a8e4c2f2cdc0e30bf6b9865923e112e2e0397c97fe8fc84775f672284bba207754e21f7941d0e7c95d69d6eab566c39a8ab593165d37b7e5432f3ca4133670d95e51c8057583e93192449b9b1d8327eb2cf6c31fcac6b5bcbd079a30094c4f57da851cc365168c04f2881cd992734ca7f950c4e1c6e35df7a53a1437d9d112f9ad83fe1015121e1b5b19c015cd9f290eb9c58eb5ccd4dffbeace38b04ef6350732d34adfc43b0d29b5c6e31a4da5bbc0cd2f3600cecf6f1001f5b042cc85c26e8504ac5371bcdea16dfed6bcb11594e35708fae79ff481f6fc2d81adcc0ee137b2603e6c9e8cd8eba7c16825804f1944215497ee4083f1e9ee3e3c5d177135cd0a99d7b04637e403762bab33a93e3130ca25b1cea1badceb8affe4f835127c872575b3988ebb98a85f1f5c9d61dec3cc4229fb054b6f43d25ce821c67cd3566771eddb1ece27d6c4e5feaeb37d87638f6ab86f65fadafa4276ad098357cda1ae746cc490e49521c4780b96635c95d60b7f2c4480d5d9504e8318f5efaf1af8dfcc0eac1a248fded8d64578066080cb762ccfb2f7499530464734d9eb09a074e1cf91ff86fa92d34612cfc43da04cf9c53f3985aa6498cf1348f105511e291a957a3a5723097591f92c7c395bb2d7f501322e2a488f93ddf7c076d0dd3ffbef4961e61de866f74ef4164087a269a28df8c1476cc2dacd47342259c64eca4fe7356f14d2019ea42161951fe070226ff6767f87ec0194f856a68e51af0438620362ec58db81db88ffbecf8aed8f958d44a09c9a20daba6c015419bd5bbe992ff78e419b9bb4137455c3f65a9c074a0399b4ecc2a44f5df97500aea15df3ebf7b02b98d0a4d2049084a056b5b86b504328030508f4440ca268d47fe3e2e7aeda528c0280b9750b7dfdf821823440edc849a51eeacb7f964509f8042f06525206c283b172a720d547fc44969dfc07cfefb0abc94d5e700cddabf6d23a832c8124a59b7c259baaf81f505c0bfa0abf1548fcd731272c420b53435afb3854cd9e4c67b0b5655db308425777591d19943d45e8033c58db7308601b6320694cf237796badbaefdcb9e5a910453ec2b9d3ee05a9dec4ec732b72e3431196d29cfe9acd727d015e3b47d96b1d5f73b19df0ad365b3d09125d258dc34fd42c7b699b8934d9a80b6a2de5</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="生活" scheme="http://zt-winter.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="http://zt-winter.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="天气" scheme="http://zt-winter.github.io/tags/%E5%A4%A9%E6%B0%94/"/>
    
  </entry>
  
  <entry>
    <title>golang中的零值、nil与空值</title>
    <link href="http://zt-winter.github.io/2023/04/10/%E9%9B%B6%E5%80%BCnil%E7%A9%BA%E5%80%BC/"/>
    <id>http://zt-winter.github.io/2023/04/10/%E9%9B%B6%E5%80%BCnil%E7%A9%BA%E5%80%BC/</id>
    <published>2023-04-09T16:00:00.000Z</published>
    <updated>2023-04-10T11:38:02.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="零值"><a href="#零值" class="headerlink" title="零值"></a>零值</h1><p>零值是指声明变量（分配内存时）并未显示初始化时，编译器为你的变量自动设置一个默认初始值。<a href="https://go.dev/ref/spec#The_zero_value">零值官方说明</a><br>零值默认初始值可以分为两大类：</p><ul><li>值类型：int默认值为0，bool默认值为false，float64的默认值为0.000000，byte默认值为0，string默认值是“”,对于数组和结构体，会递归初始化其元素或者字段，取决于其类型。</li><li>引用类型：均为nil，包括指针pointer，函数func，接口interface，切片slice，管道channel，哈希表map。<br>注意<code>testNum := 0</code>已经完成了初始化，不属于零值。</li></ul><h1 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h1><p>最初接触nil，是错误处理时，通过返回的error是否为nil判断是否出现错误。nil是go中预先声明的标识符，主要用来表示引用类型的零值，表示它们未被初始化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\\nil经典问题</span><br><span class="line">var p *int</span><br><span class="line">var i interface&#123;&#125;</span><br><span class="line">var p1 *[3]int</span><br><span class="line"></span><br><span class="line">fmt.Println(p1 == p) \\编译不通过，因为类型不一致</span><br><span class="line">fmt.Println(i == p) \\返回结果为True</span><br></pre></td></tr></table></figure><p>上述结果的原因在于，interface是没有类型，其他变量声明时已经指定了类型。一般不同类型的数据不能直接比较。有些比较是go内部进行了类型转换，然后比较。而interface可以接受任意类型，因此在interface比较时会比较类型与值两个部分。p与i值都是nil，但是类型不一致。<br>在判断<code>p1==p</code>时，编辑器会直接提示类型不一致，不能比较。</p><p>#空结构<br>空结构是没有任何字段的结构类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type sample struct&#123;&#125;</span><br></pre></td></tr></table></figure><p>一个结构体示例的大小由其字段的宽度与对齐标准决定。空结构占用零字节，也不用填充对齐。空结构数组或者切片也不占用空间。常见的两个用途：</p><ul><li>chan strcut{}代替chan bool传递信号，此时我们不关注传递的值，只关注传递的动作是否发生。</li><li>防止unkeyed初始化结构<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type sample &#123;</span><br><span class="line"> x int</span><br><span class="line"> y int</span><br><span class="line"> _ struct&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>此时赋值sample{x:1,y:1}，但sample{1,1}出现错误。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;零值&quot;&gt;&lt;a href=&quot;#零值&quot; class=&quot;headerlink&quot; title=&quot;零值&quot;&gt;&lt;/a&gt;零值&lt;/h1&gt;&lt;p&gt;零值是指声明变量（分配内存时）并未显示初始化时，编译器为你的变量自动设置一个默认初始值。&lt;a href=&quot;https://go.dev/re</summary>
      
    
    
    
    <category term="go" scheme="http://zt-winter.github.io/categories/go/"/>
    
    
    <category term="golang" scheme="http://zt-winter.github.io/tags/golang/"/>
    
    <category term="nil" scheme="http://zt-winter.github.io/tags/nil/"/>
    
    <category term="zero value" scheme="http://zt-winter.github.io/tags/zero-value/"/>
    
  </entry>
  
  <entry>
    <title>ssh配置</title>
    <link href="http://zt-winter.github.io/2023/02/05/ssh/"/>
    <id>http://zt-winter.github.io/2023/02/05/ssh/</id>
    <published>2023-02-04T16:00:00.000Z</published>
    <updated>2023-02-05T13:09:15.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ssh配置与相关错误解决"><a href="#ssh配置与相关错误解决" class="headerlink" title="ssh配置与相关错误解决"></a>ssh配置与相关错误解决</h1><ol><li>错误信息:<code>git@github.com: Permission denied (publickey,password,keyboard-interactive)</code><br>环境:linux,在一个星期前,原本github配置还能够使用,突然需要输入密码,且在输入密码后依然无法连接<br>原因:连接github无法找到对应的密钥<br>排查过程:使用<code>ssh -Tv git@github.com</code>报错依然是该信息,重新生成密钥后再次添加到github.com的ssh公钥管理中,依然报错.怀疑是ssh配置出现问题,查看~&#x2F;.ssh&#x2F;config文件,相关信息如下所示<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/github</span><br></pre></td></tr></table></figure>解决方法:在stackoverflow中找到解决方法,将github.com(HostName)改为ssh.github.com. 尝试后解决.怀疑github关于https与ssh两种连接方式更新后,ssh需要单独指向ssh.github.com</li><li>错误信息:<code>git@github.com: Permission denied (publickey,password,keyboard-interactive)</code><br>环境:windows,第一次配置github,无法使用.<br>原因:连接github无法找到对应的密钥<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host github</span><br><span class="line">HostName ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>解决方法:将github(Host)改为github.com.问题在于对于一般的ssh远程连接,Host就是一个昵称,在命令行<code>ssh xxx</code>使用,但在github的连接中,应该使用github.com,否则ssh无法找到对应的配置.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ssh配置与相关错误解决&quot;&gt;&lt;a href=&quot;#ssh配置与相关错误解决&quot; class=&quot;headerlink&quot; title=&quot;ssh配置与相关错误解决&quot;&gt;&lt;/a&gt;ssh配置与相关错误解决&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;错误信息:&lt;code&gt;git@github.co</summary>
      
    
    
    
    <category term="ssh" scheme="http://zt-winter.github.io/categories/ssh/"/>
    
    
    <category term="linux" scheme="http://zt-winter.github.io/tags/linux/"/>
    
    <category term="ssh" scheme="http://zt-winter.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>linux-wifi</title>
    <link href="http://zt-winter.github.io/2022/12/12/linux-wifi/"/>
    <id>http://zt-winter.github.io/2022/12/12/linux-wifi/</id>
    <published>2022-12-12T02:43:00.945Z</published>
    <updated>2022-12-12T02:43:00.945Z</updated>
    
    <content type="html"><![CDATA[<p>主机上装了双系统，昨天晚上使用windows10打完游戏后，今天进入Linux发现没有无线网卡设备，报错信息为<code>kernel iwlwifi: probe of failed with error -110</code>。</p><p>搜索相关报错信息后发现原因为windows10为了快速启动，即使关闭windows也不会释放网卡设备，以便下次启动时不用再次加载网卡驱动，但这导致linux启动时发现网卡设备被占用，无法使用网卡设备。</p><p>解决方法：windows10进入控制面板，打开电源设置，关闭快速启动。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主机上装了双系统，昨天晚上使用windows10打完游戏后，今天进入Linux发现没有无线网卡设备，报错信息为&lt;code&gt;kernel iwlwifi: probe of failed with error -110&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;搜索相关报错信息后发现原因</summary>
      
    
    
    
    <category term="linux" scheme="http://zt-winter.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="http://zt-winter.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>error处理</title>
    <link href="http://zt-winter.github.io/2022/09/20/error/"/>
    <id>http://zt-winter.github.io/2022/09/20/error/</id>
    <published>2022-09-19T16:00:00.000Z</published>
    <updated>2022-09-20T04:07:19.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="error处理机制"><a href="#error处理机制" class="headerlink" title="error处理机制"></a>error处理机制</h1><ul><li>用golang写网络流量处理代码时，因为网络协议很多内容字段解析依靠前面的规定的长度，而应用层的具体协议在传输层不会指出，因此依靠一些简单字段判断协议会将协议识别错误，导致slice越界。因此在每次读取字符流都要做错误判断，同时gopacket大量协议解析函数返回值都存在error，都需要做错误判断。在写的时候觉得非常麻烦。觉得try{}catch{}的处理方式可能更好。</li><li>最近维护的一个java的代码，在上线测试出现问题，排查问题时代码在最上层使用try catch，所有的错误都在最上层的几个函数抛出，导致需要自己在各处下判断，需找错误。</li><li>try catch这种错误处理模式，就是直接将所有错误全部甩出，导致后期维护困难，而每个错误做具体处理导致前期开发困难，各有优劣。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;error处理机制&quot;&gt;&lt;a href=&quot;#error处理机制&quot; class=&quot;headerlink&quot; title=&quot;error处理机制&quot;&gt;&lt;/a&gt;error处理机制&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;用golang写网络流量处理代码时，因为网络协议很多内容字段解析依靠前面</summary>
      
    
    
    
    <category term="go, java" scheme="http://zt-winter.github.io/categories/go-java/"/>
    
    
    <category term="error" scheme="http://zt-winter.github.io/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>dfs</title>
    <link href="http://zt-winter.github.io/2022/08/20/leetcode207/"/>
    <id>http://zt-winter.github.io/2022/08/20/leetcode207/</id>
    <published>2022-08-20T12:55:20.404Z</published>
    <updated>2022-08-20T12:55:20.404Z</updated>
    
    <content type="html"><![CDATA[<p>深度优先搜索算法一般用于树或者图的结构中，在写代码时有下面几个注意的地方。</p><p>leetcode 207题<br>首先读懂题目，课程只有0~crousenum-1门，如果没有课程相互前置，是一定能够学完的。题目就是判断是否有循环依赖。可以使用广度+深度搜索，遍历一个节点所依赖节点，如果所依赖节点也有依赖则继续判断。</p><p>这里每个节点在遍历时赋予了属性：未检索、正在检索、已经完成检索。为什么不是设置未检索和已经完成检索两个值。主要原因是需要判断是否有相互依赖。设置已经完成检索需要在完成该节点的依赖遍历后，但遍历的节点如果依赖正在的遍历的节点，那只设置两个值的话，就会检测不出来。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">canFinish(numCourses <span class="type">int</span>, prerequisites [][]<span class="type">int</span>) <span class="type">bool</span> &#123;</span><br><span class="line">    depend := <span class="built_in">make</span>([][]<span class="type">int</span>, numCourses)</span><br><span class="line">flag := <span class="built_in">make</span>([]<span class="type">int</span>, numCourses)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(prerequisites); i++ &#123;</span><br><span class="line">depend[prerequisites[i][<span class="number">0</span>]] = <span class="built_in">append</span>(depend[prerequisites[i][<span class="number">0</span>]], prerequisites[i][<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">bool</span></span><br><span class="line">dfs = <span class="function"><span class="keyword">func</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">if</span> flag[n] == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">flag[n] = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(depend[n]); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> flag[depend[n][i]] == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> flag[depend[n][i]] == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> !dfs(depend[n][i]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">flag[n] = <span class="number">2</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numCourses; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> flag[i] != <span class="number">2</span> &amp;&amp; !dfs(i) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;深度优先搜索算法一般用于树或者图的结构中，在写代码时有下面几个注意的地方。&lt;/p&gt;
&lt;p&gt;leetcode 207题&lt;br&gt;首先读懂题目，课程只有0~crousenum-1门，如果没有课程相互前置，是一定能够学完的。题目就是判断是否有循环依赖。可以使用广度+深度搜索，遍历一</summary>
      
    
    
    
    <category term="algorithm" scheme="http://zt-winter.github.io/categories/algorithm/"/>
    
    
    <category term="拓扑排序" scheme="http://zt-winter.github.io/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
    <category term="dfs" scheme="http://zt-winter.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>前缀及其优化</title>
    <link href="http://zt-winter.github.io/2022/07/25/%E5%89%8D%E7%BC%80/"/>
    <id>http://zt-winter.github.io/2022/07/25/%E5%89%8D%E7%BC%80/</id>
    <published>2022-07-25T08:17:51.761Z</published>
    <updated>2022-07-25T08:17:51.761Z</updated>
    
    <content type="html"><![CDATA[<p>有些问题可以转化为两个前缀进行简单计算得到结果，如：一个数组子数组的和为K的个数，子数组的和，可以转化为两个前缀数组相减。<br>类似题目有：<br><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">leetcode 209</a><br><a href="https://leetcode.cn/problems/subarray-sum-equals-k/comments/">leetcode 560</a><br><a href="https://leetcode.cn/problems/shortest-subarray-with-sum-at-least-k/">leetcode 862</a></p><p>以leetcode 560题为例<br>subsum &#x3D; sum[i] - sum[j]<br>因此可以使用两次循环遍历获得，这么做时间复杂度为O(n2)。</p><p>可以在此基础上，进一步优化。在第一次循环中，我们已知sum[i]，subsum的目标值k，同时j&lt;i。因此可以使用map，来检索是否存在sum[j]。时间复杂度降为O(n)。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">subarraySum</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    length := <span class="built_in">len</span>(nums)</span><br><span class="line">    sum := <span class="built_in">make</span>([]<span class="type">int</span>, length)</span><br><span class="line">    sum[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; length; i++ &#123;</span><br><span class="line">        sum[i] = sum[i<span class="number">-1</span>] + nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">    pre := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">    ret := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> sum[i] == k &#123;</span><br><span class="line">            ret++</span><br><span class="line">        &#125;</span><br><span class="line">        one := sum[i] - k</span><br><span class="line">        <span class="keyword">if</span> value, ok := pre[one]; ok &#123;</span><br><span class="line">            ret += value</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> _, ok := pre[sum[i]]; ok &#123;</span><br><span class="line">            pre[sum[i]] += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre[sum[i]] = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标准答案中的代码更加简洁，也节省了时间、空间,sum已经存储到map中不必再使用[]int,节省空间,同时将sum的计算与判断是否有子数组放到一个循环里，节省了时间</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">subarraySum</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    count, pre := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    m := <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    m[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        pre += nums[i]</span><br><span class="line">        <span class="keyword">if</span> _, ok := m[pre - k]; ok &#123;</span><br><span class="line">            count += m[pre - k]</span><br><span class="line">        &#125;</span><br><span class="line">        m[pre] += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>209题可以使用双指针滑动窗口，但560题则不行，因为560题中是整数，既有正数，也有负数，窗口的移动需要一步一迭代，窗口大小单调增长.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有些问题可以转化为两个前缀进行简单计算得到结果，如：一个数组子数组的和为K的个数，子数组的和，可以转化为两个前缀数组相减。&lt;br&gt;类似题目有：&lt;br&gt;&lt;a href=&quot;https://leetcode.cn/problems/minimum-size-subarray-su</summary>
      
    
    
    
    <category term="algorithm" scheme="http://zt-winter.github.io/categories/algorithm/"/>
    
    
    <category term="hash" scheme="http://zt-winter.github.io/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>闭包</title>
    <link href="http://zt-winter.github.io/2022/07/21/%E9%97%AD%E5%8C%85/"/>
    <id>http://zt-winter.github.io/2022/07/21/%E9%97%AD%E5%8C%85/</id>
    <published>2022-07-20T16:00:00.000Z</published>
    <updated>2022-07-21T08:30:20.543Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/56750616">相关参考文章</a><br>这篇文章说的很详细，可以自己动手从汇编的角度看看底层实现</p><h1 id="闭包的定义"><a href="#闭包的定义" class="headerlink" title="闭包的定义"></a>闭包的定义</h1><p>闭包 是由函数及其相关引用环境组合而成的实体(即：闭包&#x3D;函数+引用环境)。<br>“官方”的解释是：所谓“闭包”，指的是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chain</span><span class="params">(a <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s&quot;</span>, a)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chain2</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;test2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fib函数的返回值是一个函数func() int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">a, b := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">a, b = b, a + b</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f := chain</span><br><span class="line">fmt.Println(reflect.TypeOf(f))</span><br><span class="line">fmt.Println(f(<span class="string">&quot;sadf&quot;</span>))</span><br><span class="line">f2 := chain2</span><br><span class="line">f2()</span><br><span class="line">f3 := fib</span><br><span class="line">fmt.Println(<span class="string">&quot;func fib() func() int&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;fib type is %s\n&quot;</span>, reflect.TypeOf(f3))</span><br><span class="line">fmt.Println(f3(), f3(), f3(), f3(), f3())</span><br><span class="line">f4 := fib()</span><br><span class="line">fmt.Printf(<span class="string">&quot;fib() type is %s\n&quot;</span>, reflect.TypeOf(f4))</span><br><span class="line">fmt.Println(f4(), f4(), f4(), f4(), f4())</span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./code/go/test/test</span></span><br><span class="line">func(string) int</span><br><span class="line">sadf0</span><br><span class="line">test2</span><br><span class="line">func fib() func() int</span><br><span class="line">fib type is func() func() int</span><br><span class="line">0x480760 0x480740 0x480720 0x480700 0x4806e0</span><br><span class="line">fib() type is func() int</span><br><span class="line">1 1 2 3 5</span><br></pre></td></tr></table></figure><p>合理使用闭包函数，可以减少参数传递和代码量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//leetcode 76题</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minWindow</span><span class="params">(s <span class="type">string</span>, t <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    ori, cnt := <span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>&#123;&#125;, <span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(t); i++ &#123;</span><br><span class="line">        ori[t[i]]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sLen := <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="built_in">len</span> := math.MaxInt32</span><br><span class="line">    ansL, ansR := <span class="number">-1</span>, <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    check := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> k, v := <span class="keyword">range</span> ori &#123;</span><br><span class="line">            <span class="keyword">if</span> cnt[k] &lt; v &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> l, r := <span class="number">0</span>, <span class="number">0</span>; r &lt; sLen; r++ &#123;</span><br><span class="line">        <span class="keyword">if</span> r &lt; sLen &amp;&amp; ori[s[r]] &gt; <span class="number">0</span> &#123;</span><br><span class="line">            cnt[s[r]]++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> check() &amp;&amp; l &lt;= r &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l + <span class="number">1</span> &lt; <span class="built_in">len</span>) &#123;</span><br><span class="line">                <span class="built_in">len</span> = r - l + <span class="number">1</span></span><br><span class="line">                ansL, ansR = l, l + <span class="built_in">len</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> _, ok := ori[s[l]]; ok &#123;</span><br><span class="line">                cnt[s[l]] -= <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            l++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ansL == <span class="number">-1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s[ansL:ansR]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/56750616&quot;&gt;相关参考文章&lt;/a&gt;&lt;br&gt;这篇文章说的很详细，可以自己动手从汇编的角度看看底层实现&lt;/p&gt;
&lt;h1 id=&quot;闭包的定义&quot;&gt;&lt;a href=&quot;#闭包的定义&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="go" scheme="http://zt-winter.github.io/categories/go/"/>
    
    
    <category term="闭包" scheme="http://zt-winter.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>单调栈</title>
    <link href="http://zt-winter.github.io/2022/07/15/monotonic_stack/"/>
    <id>http://zt-winter.github.io/2022/07/15/monotonic_stack/</id>
    <published>2022-07-14T16:00:00.000Z</published>
    <updated>2022-07-15T08:23:33.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><p>leetcode 84题</p><p>给定n个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为1。</p><p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p><p>​要求最大面积，不管最后的面积如何，都肯定包括一个完整的柱子。所以我们找最大面积，可以将所有柱子作为那个完整的柱子，也就是最大面积的高度被我们确定。然后向两边扩展，然后比较所有这些扩展的面积大小。选择柱子 j 作为最高的完整柱子，如果向左扩展，那么要求 i &lt; j ，同时heights[i] &gt; heights[j]。然后是边界如何重复利用的问题。 x &lt; y &lt; z ，当我们知道 y 的边界是 x 后，能否能过比较 y 和 z 来判断 z 的边界。对于任意的 i ， x &lt; i &lt; y ，可以说 heights[i] &gt; heights[y] ，如果 heights[y] &gt; heights[z] ，所有的 heights[i] &gt; heights[z] ，所以 z 的边界可以从 x 开始推。这种数据进出模式类似栈。所以可以尝试用栈试试。</p><p>​例子 [6,7,5,2,4,5,9,3] ：</p><p> 6 进栈，栈开始为空，无出栈，栈长为1，6的边界height数组第一个数。</p><p>7 进栈， 7 &gt; 6 ，无出栈，栈长为2，7的边界为height数组的第二个数。</p><p>5 进栈，5 比 6、7小，所以6 、7 出栈，栈长为1，5的边界为height数组的第一个数。</p><p>2 进栈，2 &lt; 5，所以5出栈，栈长为1，2的边界为height数组的第一个数。</p><p>依次类推。由于数组索引第一个为0，所以可以将所以数字减一。</p><p>同理可以得到柱子的右边界。</p><p>使用一个栈和两个数组，可以保存数组中任意元素的左右边界。然后比较求值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">largestRectangleArea</span><span class="params">(heights []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(heights)</span><br><span class="line">    left, right := <span class="built_in">make</span>([]<span class="type">int</span>, n), <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        right[i] = n</span><br><span class="line">    &#125;</span><br><span class="line">    mono_stack := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">len</span>(mono_stack) &gt; <span class="number">0</span> &amp;&amp; heights[mono_stack[<span class="built_in">len</span>(mono_stack)<span class="number">-1</span>]] &gt;= heights[i] &#123;</span><br><span class="line">            right[mono_stack[<span class="built_in">len</span>(mono_stack)<span class="number">-1</span>]] = i</span><br><span class="line">            mono_stack = mono_stack[:<span class="built_in">len</span>(mono_stack)<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(mono_stack) == <span class="number">0</span> &#123;</span><br><span class="line">            left[i] = <span class="number">-1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left[i] = mono_stack[<span class="built_in">len</span>(mono_stack)<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        mono_stack = <span class="built_in">append</span>(mono_stack, i)</span><br><span class="line">    &#125;</span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        ans = max(ans, (right[i] - left[i] - <span class="number">1</span>) * heights[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单调栈&quot;&gt;&lt;a href=&quot;#单调栈&quot; class=&quot;headerlink&quot; title=&quot;单调栈&quot;&gt;&lt;/a&gt;单调栈&lt;/h1&gt;&lt;p&gt;leetcode 84题&lt;/p&gt;
&lt;p&gt;给定n个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为1。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="algorithm" scheme="http://zt-winter.github.io/categories/algorithm/"/>
    
    
    <category term="monotonic_stack" scheme="http://zt-winter.github.io/tags/monotonic-stack/"/>
    
  </entry>
  
  <entry>
    <title>f2fs文件目录存储结构</title>
    <link href="http://zt-winter.github.io/2022/07/13/f2fs%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%AD%98%E5%82%A8%E8%AF%B4%E6%98%8E/"/>
    <id>http://zt-winter.github.io/2022/07/13/f2fs%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%AD%98%E5%82%A8%E8%AF%B4%E6%98%8E/</id>
    <published>2022-07-12T16:00:00.000Z</published>
    <updated>2022-07-13T08:23:32.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="f2f2文件目录存储结构"><a href="#f2f2文件目录存储结构" class="headerlink" title="f2f2文件目录存储结构"></a>f2f2文件目录存储结构</h1><p>当前目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ tree mnt/f2fs</span><br><span class="line">mnt/f2fs</span><br><span class="line">├── dir</span><br><span class="line">│   ├── 6.29.cfx.pcap</span><br><span class="line">│   └── testone</span><br><span class="line">└── test</span><br><span class="line"></span><br><span class="line">1 directory, 3 files</span><br></pre></td></tr></table></figure><p>文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mnt/f2fs/test:</span><br><span class="line">hello world</span><br><span class="line">mnt/f2fs/dir/testone</span><br><span class="line">hellow zt</span><br><span class="line">mnt/f2fs/dir/6.29.cfx.pcap 一个27MB的数据包文件</span><br></pre></td></tr></table></figure><h3 id="NAT信息"><a href="#NAT信息" class="headerlink" title="NAT信息"></a>NAT信息</h3><p>查看inode信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dump.f2fs -n 0~-1 /dev/loop0</span><br><span class="line">$ nvim dump_nat</span><br><span class="line">  1 nid:    3   ino:    3   offset:    0    blkaddr:      4101  pack:2</span><br><span class="line">  2 nid:    4   ino:    4   offset:    0    blkaddr:      4105  pack:2</span><br><span class="line">  3 nid:    5   ino:    5   offset:    0    blkaddr:      4609  pack:2</span><br><span class="line">  4 nid:    6   ino:    6   offset:    0    blkaddr:      4610  pack:2</span><br><span class="line">  5 nid:    7   ino:    7   offset:    0    blkaddr:      4611  pack:2</span><br><span class="line">  6 nid:    8   ino:    7   offset:    1    blkaddr:      4612  pack:2</span><br><span class="line">  7 nid:    9   ino:    7   offset:    2    blkaddr:      4613  pack:2</span><br><span class="line">  8 nid:   10   ino:    7   offset:    3    blkaddr:      5120  pack:2</span><br><span class="line">  9 nid:   11   ino:    7   offset:    4    blkaddr:      4614  pack:2</span><br><span class="line"> 10 nid:   12   ino:    7   offset:    5    blkaddr:      4615  pack:2</span><br><span class="line"> 11 nid:   13   ino:    7   offset:    6    blkaddr:      4616  pack:2</span><br><span class="line"> 12 nid:   14   ino:    7   offset:    7    blkaddr:      4617  pack:2</span><br><span class="line"> 13 nid:   15   ino:    7   offset:    8    blkaddr:      4618  pack:2</span><br><span class="line"> 14 nid:   16   ino:    7   offset:    9    blkaddr:      4619  pack:2</span><br></pre></td></tr></table></figure><p>从super block中可以得到信息，NAT的地址0xa00000，CP中的NAT journal地址在0x201000<br>00000400  10 20 f5 f2 01 00 0f 00  09 00 00 00 03 00 00 00  |. …………..|<br>00000410  0c 00 00 00 09 00 00 00  01 00 00 00 01 00 00 00  |…………….|<br>00000420  00 00 00 00 00 64 00 00  00 00 00 00 2a 00 00 00  |…..d……<em>…|<br>00000430  31 00 00 00 02 00 00 00  02 00 00 00 02 00 00 00  |1……………|<br>00000440  01 00 00 00 2a 00 00 00  00 02 00 00 00 02 00 00  |….</em>………..|<br>00000450  00 06 00 00 <font color=red><strong>00 0a 00 00</strong></font>  00 0e 00 00 00 10 00 00  |…………….|<br>00000460  03 00 00 00 01 00 00 00  02 00 00 00 83 8f 92 2c  |……………,|<br>00000470  60 18 4d 2e 85 c3 d4 8e  56 29 d9 dc 00 00 00 00  |&#96;.M…..V)……|<br>00000480  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |…………….|</p><p>查看NAT，红色是node的序号，蓝色是node的地址，绿色是版本号，接下来是下一个节点。</p><p>在这里3号node是根目录，4号node是dir目录，5号node是test文件，6号文件是testone，7号文件是6.29.cap</p><p>00a00000  00 00 00 00 00 00 00 00  00 00 01 00 00 00 01 00  |…………….|<br>00a00010  00 00 00 02 00 00 00 01  00 00 00 <font color=green><strong>00</strong></font> <font color=red><strong>03 00 00 00</strong></font>  |…………….|<br>00a00020  <font color=blue><strong>05 10 00 00</strong></font> 00 04 00 00  00 08 10 00 00 00 05 00  |…………….|<br>00a00030  00 00 01 12 00 00 00 06  00 00 00 02 12 00 00 00  |…………….|<br>00a00040  07 00 00 00 03 12 00 00  00 07 00 00 00 04 12 00  |…………….|<br>00a00050  00 00 07 00 00 00 05 12  00 00 00 07 00 00 00 00  |…………….|<br>00a00060  14 00 00 00 07 00 00 00  06 12 00 00 00 07 00 00  |…………….|<br>00a00070  00 07 12 00 00 00 07 00  00 00 08 12 00 00 00 07  |…………….|<br>00a00080  00 00 00 09 12 00 00 00  07 00 00 00 0a 12 00 00  |…………….|<br>00a00090  00 07 00 00 00 0b 12 00  00 00 00 00 00 00 00 00  |…………….|<br>00a000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |…………….|</p><ul><li><strong>当文件系统修改比较小时，会将修改数据保存在nat journal中，而不直接写入到SIT和NAT中，减少读写次数。</strong></li></ul><h3 id="node-inode-文件存储"><a href="#node-inode-文件存储" class="headerlink" title="node   inode  文件存储"></a>node   inode  文件存储</h3><p>从下图的f2fs_node数据结构可以看出，f2fs_node分为三种inode、direct_node、indirect。第一种，node存储指向data的指针；第二种，direct_node存储指向node的指针，然后再由node存储指向data的指针</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1081 struct f2fs_node &#123;</span><br><span class="line">1082     /* can be one of three types: inode, direct, and indirect types */</span><br><span class="line">1083     union &#123;</span><br><span class="line">1084         struct f2fs_inode i;</span><br><span class="line">1085         struct direct_node dn;</span><br><span class="line">1086         struct indirect_node in;</span><br><span class="line">1087     &#125;;</span><br><span class="line">1088     struct node_footer footer;</span><br><span class="line">1089 &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> 994 struct f2fs_inode &#123;</span><br><span class="line"> 995     __le16 i_mode;          /* file mode */</span><br><span class="line"> 996     __u8 i_advise;          /* file hints */</span><br><span class="line"> 997     __u8 i_inline;          /* file inline flags */</span><br><span class="line"> 998     __le32 i_uid;           /* user ID */</span><br><span class="line"> 999     __le32 i_gid;           /* group ID */</span><br><span class="line">1000     __le32 i_links;         /* links count */</span><br><span class="line">1001     __le64 i_size;          /* file size in bytes */</span><br><span class="line">1002     __le64 i_blocks;        /* file size in blocks */</span><br><span class="line">1003     __le64 i_atime;         /* access time */</span><br><span class="line">1004     __le64 i_ctime;         /* change time */</span><br><span class="line">1005     __le64 i_mtime;         /* modification time */</span><br><span class="line">1006     __le32 i_atime_nsec;        /* access time in nano scale */</span><br><span class="line">1007     __le32 i_ctime_nsec;        /* change time in nano scale */</span><br><span class="line">1008     __le32 i_mtime_nsec;        /* modification time in nano scale */</span><br><span class="line">1009     __le32 i_generation;        /* file version (for NFS) */</span><br><span class="line">1010     union &#123;</span><br><span class="line">1011         __le32 i_current_depth; /* only for directory depth */</span><br><span class="line">1012         __le16 i_gc_failures;   /*</span><br><span class="line">1013                      * # of gc failures on pinned file.</span><br><span class="line">1014                      * only for regular files.</span><br><span class="line">1015                      */</span><br><span class="line">1016     &#125;;</span><br><span class="line">1017     __le32 i_xattr_nid;     /* nid to save xattr */</span><br><span class="line">1018     __le32 i_flags;         /* file attributes */</span><br><span class="line">1019     __le32 i_pino;          /* parent inode number */</span><br><span class="line">1020     __le32 i_namelen;       /* file name length */</span><br><span class="line">1021     __u8 i_name[F2FS_NAME_LEN]; /* file name for SPOR */</span><br><span class="line">1022     __u8 i_dir_level;       /* dentry_level for large dir */</span><br><span class="line">1023</span><br><span class="line">1024     struct f2fs_extent i_ext __attribute__((packed));   /* caching a largest extent */</span><br><span class="line">1025</span><br><span class="line">1026     union &#123;</span><br><span class="line">1027         struct &#123;</span><br><span class="line">1028             __le16 i_extra_isize;   /* extra inode attribute size */</span><br><span class="line">1029             __le16 i_inline_xattr_size; /* inline xattr size, unit: 4 bytes */</span><br><span class="line">1030             __le32 i_projid;    /* project id */</span><br><span class="line">1031             __le32 i_inode_checksum;/* inode meta checksum */</span><br><span class="line">1032             __le64 i_crtime;    /* creation time */</span><br><span class="line">1033             __le32 i_crtime_nsec;   /* creation time in nano scale */</span><br><span class="line">1034             __le64 i_compr_blocks;  /* # of compressed blocks */</span><br><span class="line">1035             __u8 i_compress_algrithm;   /* compress algrithm */</span><br><span class="line">1036             __u8 i_log_cluster_size;    /* log of cluster size */</span><br><span class="line">1037             __le16 i_padding;       /* padding */</span><br><span class="line">1038             __le32 i_extra_end[0];  /* for attribute size calculation */</span><br><span class="line">1039         &#125; __attribute__((packed));</span><br><span class="line">1040         __le32 i_addr[DEF_ADDRS_PER_INODE]; /* Pointers to data blocks */</span><br><span class="line">1041     &#125;;</span><br><span class="line">1042     __le32 i_nid[5];        /* direct(2), indirect(2),</span><br><span class="line">1043                         double_indirect(1) node id */</span><br><span class="line">1044 &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1071 struct node_footer &#123;</span><br><span class="line">1072     __le32 nid;     /* node id */</span><br><span class="line">1073     __le32 ino;     /* inode nunmber */</span><br><span class="line">1074     __le32 flag;        /* include cold/fsync/dentry marks and offset */</span><br><span class="line">1075     __le64 cp_ver __attribute__((packed));      /* checkpoint version */</span><br><span class="line">1076     __le32 next_blkaddr;    /* next node page block address */</span><br><span class="line">1077 &#125;;</span><br></pre></td></tr></table></figure><p>红色部分对应inode的i_name[F2FS_NAME_LEN]和i_dir_level，占256字节；蓝色部分对应inode的f2fs_extent i_ext，占12个字节。黑色部分对应inode的__len32  i_addr[DEF_ADDRS_PER_INODE]的部分。</p><p>__attribute__((paecked)) : 表示编译时不按照内存对齐的方式，以节约内存</p><p>0120c000  a4 81 00 01 00 00 00 00  00 00 00 00 01 00 00 00  |…………….|<br>0120c010  06 28 18 02 00 00 00 00  8d 21 00 00 00 00 00 00  |.(…….!……|<br>0120c020  06 48 c4 62 00 00 00 00  86 32 c4 62 00 00 00 00  |.H.b…..2.b….|<br>0120c030  86 32 c4 62 00 00 00 00  cc 71 67 0c 33 04 62 2c  |.2.b…..qg.3.b,|<br>0120c040  33 04 62 2c 9c 01 92 e4  00 00 00 00 00 00 00 00  |3.b,…………|<br>0120c050  00 00 00 00 04 00 00 00  0d 00 00 00 <font color=red>36 2e 32 39</font>  |…………6.29|<br>0120c060  <font color=red>2e 63 66 78 2e 70 63 61  70 00 00 00 00 00 00 00</font>  |.cfx.pcap…….|<br>0120c070  <font color=red>00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00</font>  |…………….|<br>*<br>0120c150  <font color=red>00 00 00 00 00 00 00 00  00 00 00 00</font> <font color=blue>00 0c 00 00</font>  |…………….|<br>0120c160  <font color=blue>00 24 00 00 00 14 00 00</font>  <strong>00 38 00 00 01 38 00 00</strong>  |.$…….8…8..|<br>0120c170  <strong>02 38 00 00 03 38 00 00  04 38 00 00 05 38 00 00</strong>  |.8…8…8…8..|<br>0120c180  <strong>06 38 00 00 07 38 00 00  08 38 00 00 09 38 00 00</strong>  |.8…8…8…8..|<br>0120c190  0a 38 00 00 0b 38 00 00  0c 38 00 00 0d 38 00 00  |.8…8…8…8..|<br>0120c1a0  0e 38 00 00 0f 38 00 00  10 38 00 00 11 38 00 00  |.8…8…8…8..|<br>0120c1b0  12 38 00 00 13 38 00 00  14 38 00 00 15 38 00 00  |.8…8…8…8..|<br>0120c1c0  16 38 00 00 17 38 00 00  18 38 00 00 19 38 00 00  |.8…8…8…8..|<br>0120c1d0  1a 38 00 00 1b 38 00 00  1c 38 00 00 1d 38 00 00  |.8…8…8…8..|<br>0120c1e0  1e 38 00 00 1f 38 00 00  20 38 00 00 21 38 00 00  |.8…8.. 8..!8..|<br>0120c1f0  22 38 00 00 23 38 00 00  24 38 00 00 25 38 00 00  |”8..#8..$8..%8..|<br>0120c200  26 38 00 00 27 38 00 00  28 38 00 00 29 38 00 00  |&amp;8..’8..(8..)8..|</p><p>可以看一看0x3801000的内存，是6.29.cfx.pcap的文件数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">03801000  00 01 50 64 2b 95 5d 3d  c0 a8 0c 02 00 00 00 00  |..Pd+.]=........|</span><br><span class="line">03801010  00 00 c0 a8 0c 80 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">03801020  00 00 00 00 00 00 00 00  22 1d bc 62 f5 bf 03 00  |........&quot;..b....|</span><br><span class="line">03801030  3c 00 00 00 3c 00 00 00  ff ff ff ff ff ff 2c 97  |&lt;...&lt;.........,.|</span><br><span class="line">03801040  b1 c3 58 10 99 98 00 01  00 00 00 1d 00 00 00 04  |..X.............|</span><br><span class="line">03801050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">03801070  00 00 00 00 22 1d bc 62  8e 04 04 00 3c 00 00 00  |....&quot;..b....&lt;...|</span><br><span class="line">03801080  3c 00 00 00 ff ff ff ff  ff ff 00 22 46 2c 42 58  |&lt;..........&quot;F,BX|</span><br><span class="line">03801090  08 06 00 01 08 00 06 04  00 01 00 22 46 2c 42 58  |...........&quot;F,BX|</span><br><span class="line">038010a0  c0 a8 0a 59 00 00 00 00  00 00 c0 a8 0a 8a 00 00  |...Y............|</span><br><span class="line">038010b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">038010c0  22 1d bc 62 17 07 04 00  3c 00 00 00 3c 00 00 00  |&quot;..b....&lt;...&lt;...|</span><br><span class="line">038010d0  ff ff ff ff ff ff 50 64  2b 95 5d 3d 08 06 00 01  |......Pd+.]=....|</span><br><span class="line">038010e0  08 00 06 04 00 01 50 64  2b 95 5d 3d c0 a8 0c 02  |......Pd+.]=....|</span><br></pre></td></tr></table></figure><p>可以说，6.29.cfx的文件数据的索引保存在node7 ~ 16中。每一个node的offset  0x16c开始是文件数据的block地址。同时每个node的结尾都标注了该node的inode，都是inode7，同时标注offset，为还原文件做好了工作。</p><h3 id="目录的结构"><a href="#目录的结构" class="headerlink" title="目录的结构"></a>目录的结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1325 /* One directory entry slot representing F2FS_SLOT_LEN-sized file name */</span><br><span class="line">1326 struct f2fs_dir_entry &#123;</span><br><span class="line">1327     __le32 hash_code;   /* hash code of file name */</span><br><span class="line">1328     __le32 ino;     /* inode number */</span><br><span class="line">1329     __le16 name_len;    /* lengh of file name */</span><br><span class="line">1330     __u8 file_type;     /* file type */</span><br><span class="line">1331 &#125; __attribute__((packed));</span><br><span class="line">1332</span><br><span class="line">1333 static_assert(sizeof(struct f2fs_dir_entry) == 11, &quot;&quot;);</span><br><span class="line">1334</span><br><span class="line">1335 /* 4KB-sized directory entry block */</span><br><span class="line">1336 struct f2fs_dentry_block &#123;</span><br><span class="line">1337     /* validity bitmap for directory entries in each block */</span><br><span class="line">1338     /* (214 + 8 - 1) / 8 = 27 */</span><br><span class="line">1339     __u8 dentry_bitmap[SIZE_OF_DENTRY_BITMAP];</span><br><span class="line">1340     /* pagsize - (( size_of_dir_entry + f2fs_slot_len)*nr_entry_in_block + size_of_dir_entry_bitmap) */</span><br><span class="line">1341     /* 4096 - (( 11 + 8) * 214 + 27) = 3 */</span><br><span class="line">1342     __u8 reserved[SIZE_OF_RESERVED];</span><br><span class="line">1343     /* f2fs_dir_entry[214] len(32+32+16+8) */</span><br><span class="line">1344     struct f2fs_dir_entry dentry[NR_DENTRY_IN_BLOCK];</span><br><span class="line">1345     /* filename[214][8] */</span><br><span class="line">1346     __u8 filename[NR_DENTRY_IN_BLOCK][F2FS_SLOT_LEN];</span><br><span class="line">1347 &#125;;</span><br></pre></td></tr></table></figure><p>目前目录对应的nid：</p><ul><li>&#x2F; 根目录对应：nid3，对应的地址0x01005000。在0x01005168开始是data block pointer，指向的地址是0x1602000。红色部分是f2fs_dir_entry的hash_code，蓝色是ino(inode number)，绿色是文件名长度name_len，橘色是file_type。</li></ul><p>01602000  0f 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |…………….|<br>01602010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |…………….|<br>01602020  00 00 03 00 00 00 01 00  02 00 00 00 00 03 00 00  |…………….|<br>01602030  00 02 00 02 <font color=red><strong>2a 8b 40 64</strong></font>  <font color=blue><strong>04 00 00 00</strong></font> <font color=green><strong>03 00</strong></font> <font color=orange><strong>02</strong></font> c9  |....*.@d……..|<br>01602040  7c b4 e4 05 00 00 00 04  00 01 00 00 00 00 00 00  ||……………|<br>01602050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |…………….|<br>*<br>01602950  2e 00 00 00 00 00 00 00  2e 2e 00 00 00 00 00 00  |…………….|<br>01602960  64 69 72 00 00 00 00 00  74 65 73 74 00 00 00 00  |dir…..test….|<br>01602970  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |…………….|</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;f2f2文件目录存储结构&quot;&gt;&lt;a href=&quot;#f2f2文件目录存储结构&quot; class=&quot;headerlink&quot; title=&quot;f2f2文件目录存储结构&quot;&gt;&lt;/a&gt;f2f2文件目录存储结构&lt;/h1&gt;&lt;p&gt;当前目录结构：&lt;/p&gt;
&lt;figure class=&quot;hig</summary>
      
    
    
    
    <category term="f2fs" scheme="http://zt-winter.github.io/categories/f2fs/"/>
    
    
    <category term="f2fs" scheme="http://zt-winter.github.io/tags/f2fs/"/>
    
  </entry>
  
  <entry>
    <title>container库</title>
    <link href="http://zt-winter.github.io/2022/06/22/container/"/>
    <id>http://zt-winter.github.io/2022/06/22/container/</id>
    <published>2022-06-22T12:21:14.973Z</published>
    <updated>2022-06-22T12:21:14.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="container"><a href="#container" class="headerlink" title="container"></a>container</h1><pre><code>该库主要是实现三个数据结构</code></pre><ul><li>list : 双向链表</li><li>heap : 最小堆</li><li>ring : 环形链表</li></ul><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>可以用list双向链表实现栈的操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import(</span><br><span class="line">&quot;container/list&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//stack初始化</span><br><span class="line">stack := list.New()</span><br><span class="line"></span><br><span class="line">//压栈操作</span><br><span class="line">stack.PushBack(value)</span><br><span class="line"></span><br><span class="line">//出栈操作</span><br><span class="line">e := stack.Back()</span><br><span class="line">if e != nil &#123;</span><br><span class="line">stack.Remove(e)</span><br><span class="line">&#125;</span><br><span class="line">return e.Value</span><br><span class="line"></span><br><span class="line">//获取栈顶元素</span><br><span class="line">e := stack.Back()</span><br><span class="line">return e.Value</span><br><span class="line"></span><br><span class="line">//栈长度</span><br><span class="line">length := stack.Len()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;container&quot;&gt;&lt;a href=&quot;#container&quot; class=&quot;headerlink&quot; title=&quot;container&quot;&gt;&lt;/a&gt;container&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;该库主要是实现三个数据结构
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;</summary>
      
    
    
    
    <category term="go" scheme="http://zt-winter.github.io/categories/go/"/>
    
    
    <category term="container" scheme="http://zt-winter.github.io/tags/container/"/>
    
    <category term="list" scheme="http://zt-winter.github.io/tags/list/"/>
    
    <category term="stack" scheme="http://zt-winter.github.io/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>f2fstool函数说明</title>
    <link href="http://zt-winter.github.io/2022/06/21/f2fstool/"/>
    <id>http://zt-winter.github.io/2022/06/21/f2fstool/</id>
    <published>2022-06-20T16:00:00.000Z</published>
    <updated>2022-06-21T07:41:31.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="f2fs的基本数据结构"><a href="#f2fs的基本数据结构" class="headerlink" title="f2fs的基本数据结构"></a>f2fs的基本数据结构</h1><ul><li>sector: 扇区</li><li>block: F2FS的数据存储的基本单位是block，大小为4KB，整个flash设备被格式化为多个block组成的结构。很多数据结构也被设计为4KB的大小，这是因为很多flash设备单次IO的读写都是基于4KB的倍数进行。</li><li>segment: segment是管理block的结构，一个segment的大小是512个block，也就是2MB。</li><li>section: 默认情况下一个segment等于一个section，section是GC的基本操作单位，每次GC都会从section中选出特定的segment进行回收。F2FS将section分为了6类，分别是hot-node，warm-node，cold-node，hot-data，warm-data，cold-data，hot-&gt;cold表示了数据的从高到低的修改频率，通过不同类型的section，进行gc的时候可针对使用hot的section进行gc，以降低gc的时间开销。</li><li>zone: 默认情况一个zone等于一个section，与物理设备有关，大部分情况下用不上</li></ul><h1 id="f2fs-configuration结构体"><a href="#f2fs-configuration结构体" class="headerlink" title="f2fs_configuration结构体"></a>f2fs_configuration结构体</h1><p>f2fs_configuration结构体在include&#x2F;f2fs_fs.h文件中定义，f2fs文件系统初始化时默认参数也在include&#x2F;f2fs_fs.h文件中定义。在lib&#x2F;libf2fs.c的f2fs_init_configuration函数中进行初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">struct f2fs_configuration &#123;</span><br><span class="line">uint32_t reserved_segments;</span><br><span class="line">uint32_t new_reserved_segments;</span><br><span class="line">int sparse_mode;</span><br><span class="line">int zoned_mode;</span><br><span class="line">int zoned_model;</span><br><span class="line">size_t zone_blocks;</span><br><span class="line">double overprovision;</span><br><span class="line">double new_overprovision;</span><br><span class="line">uint32_t cur_seg[6];</span><br><span class="line">//一个section几个segment，默认为1个</span><br><span class="line">uint32_t segs_per_sec;</span><br><span class="line">//默认为1</span><br><span class="line">uint32_t secs_per_zone;</span><br><span class="line">//默认为1</span><br><span class="line">uint32_t segs_per_zone;</span><br><span class="line">uint32_t start_sector;</span><br><span class="line">uint32_t total_segments;</span><br><span class="line">uint32_t sector_size;</span><br><span class="line">uint64_t device_size;</span><br><span class="line">uint64_t total_sectors;</span><br><span class="line">uint64_t wanted_total_sectors;</span><br><span class="line">uint64_t wanted_sector_size;</span><br><span class="line">uint64_t target_sectors;</span><br><span class="line">uint64_t max_size;</span><br><span class="line">//一个block包含多少个扇区sector</span><br><span class="line">uint32_t sectors_per_blk;</span><br><span class="line">//一个segment包含多少个block</span><br><span class="line">uint32_t blks_per_seg;</span><br><span class="line">__u8 init_version[VERSION_LEN + 1];</span><br><span class="line">__u8 sb_version[VERSION_LEN + 1];</span><br><span class="line">__u8 version[VERSION_LEN + 1];</span><br><span class="line">char *vol_label;</span><br><span class="line">char *vol_uuid;</span><br><span class="line">uint16_t s_encoding;</span><br><span class="line">uint16_t s_encoding_flags;</span><br><span class="line">int heap;</span><br><span class="line">int32_t kd;</span><br><span class="line">int32_t dump_fd;</span><br><span class="line">//设备列表</span><br><span class="line">struct device_info devices[MAX_DEVICES];</span><br><span class="line">int ndevs;</span><br><span class="line">char *extension_list[2];</span><br><span class="line">const char *rootdev_name;</span><br><span class="line">int dbg_lv;</span><br><span class="line">int show_dentry;</span><br><span class="line">int trim;</span><br><span class="line">int trimmed;</span><br><span class="line">int func;</span><br><span class="line">void *private;</span><br><span class="line">int dry_run;</span><br><span class="line">//andorid 非内核运行检查</span><br><span class="line">int no_kernel_check;</span><br><span class="line">int fix_on;</span><br><span class="line">int force;</span><br><span class="line">int defset;</span><br><span class="line">int bug_on;</span><br><span class="line">int bug_nat_bits;</span><br><span class="line">bool quota_fixed;</span><br><span class="line">int alloc_failed;</span><br><span class="line">int auto_fix;</span><br><span class="line">int layout;</span><br><span class="line">int show_file_map;</span><br><span class="line">u64 show_file_map_max_offset;</span><br><span class="line">int quota_fix;</span><br><span class="line">int preen_mode;</span><br><span class="line">int ro;</span><br><span class="line">//andorid</span><br><span class="line">int preserve_limits;/* preserve quota limits */</span><br><span class="line">int large_nat_bitmap;</span><br><span class="line">int fix_chksum;/* fix old cp.chksum position */</span><br><span class="line">__le32 feature;/* defined features */</span><br><span class="line">unsigned int quota_bits;/* quota bits */</span><br><span class="line">time_t fixed_time;</span><br><span class="line"></span><br><span class="line">/* mkfs parameters */</span><br><span class="line">int fake_seed;</span><br><span class="line">uint32_t next_free_nid;</span><br><span class="line">uint32_t quota_inum;</span><br><span class="line">uint32_t quota_dnum;</span><br><span class="line">uint32_t lpf_inum;</span><br><span class="line">uint32_t lpf_dnum;</span><br><span class="line">uint32_t lpf_ino;</span><br><span class="line">uint32_t root_uid;</span><br><span class="line">uint32_t root_gid;</span><br><span class="line"></span><br><span class="line">/* defragmentation parameters */</span><br><span class="line">int defrag_shrink;</span><br><span class="line">uint64_t defrag_start;</span><br><span class="line">uint64_t defrag_len;</span><br><span class="line">uint64_t defrag_target;</span><br><span class="line"></span><br><span class="line">/* sload parameters */</span><br><span class="line">char *from_dir;</span><br><span class="line">char *mount_point;</span><br><span class="line">char *target_out_dir;</span><br><span class="line">char *fs_config_file;</span><br><span class="line">#ifdef HAVE_LIBSELINUX</span><br><span class="line">struct selinux_opt seopt_file[8];</span><br><span class="line">int nr_opt;</span><br><span class="line">#endif</span><br><span class="line">int preserve_perms;</span><br><span class="line"></span><br><span class="line">/* resize parameters */</span><br><span class="line">int safe_resize;</span><br><span class="line"></span><br><span class="line">/* precomputed fs UUID checksum for seeding other checksums */</span><br><span class="line">uint32_t chksum_seed;</span><br><span class="line"></span><br><span class="line">/* cache parameters */</span><br><span class="line">dev_cache_config_t cache_config;</span><br><span class="line"></span><br><span class="line">/* compression support for sload.f2fs */</span><br><span class="line">compress_config_t compress;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;f2fs的基本数据结构&quot;&gt;&lt;a href=&quot;#f2fs的基本数据结构&quot; class=&quot;headerlink&quot; title=&quot;f2fs的基本数据结构&quot;&gt;&lt;/a&gt;f2fs的基本数据结构&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;sector: 扇区&lt;/li&gt;
&lt;li&gt;block: F</summary>
      
    
    
    
    <category term="f2fs" scheme="http://zt-winter.github.io/categories/f2fs/"/>
    
    
    <category term="f2fs" scheme="http://zt-winter.github.io/tags/f2fs/"/>
    
  </entry>
  
  <entry>
    <title>内存管理</title>
    <link href="http://zt-winter.github.io/2022/06/21/%E5%86%85%E5%AD%98/"/>
    <id>http://zt-winter.github.io/2022/06/21/%E5%86%85%E5%AD%98/</id>
    <published>2022-06-20T16:00:00.000Z</published>
    <updated>2022-06-21T04:48:10.675Z</updated>
    
    <content type="html"><![CDATA[<p>一般来说函数调用的参数、返回值、局部变量都会被分配到栈上。但golang是静态语言，在编译过程中，编译器会做逃逸分析，如果发现在函数外部有对应的指针指向这些值时，这些值会被分配到堆上，在函数结束后保留，由golang的垃圾回收机制决定何时回收。</p><h3 id="堆的内存管理"><a href="#堆的内存管理" class="headerlink" title="堆的内存管理"></a>堆的内存管理</h3><p>内存管理一般包含三个不同的组件,分别是用户程序（Mutatur），分配器（allocator）和收集器（Collector），当用户程序申请内存时，它会通过内存分配器申请新内存，而分配器会负责从堆中初始化相应的内存区域。</p><p>堆的内存分配策略：该策略会将内存分割成由4、8、16、32字节的内存块组成的链表，根据申请内存大小，找到满足条件的链表，再从链表中选择合适的内存块。</p><h3 id="栈的内存管理"><a href="#栈的内存管理" class="headerlink" title="栈的内存管理"></a>栈的内存管理</h3><p>目前需要注意的一点是，函数参数是放在栈中的。而放入的一个slice时，栈的内存分配是按照size分配，而slice可能cap大于size。如果出现append(sliceone, elem)的情况，可能会覆盖sliceone后面的参数，造成数据错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">func CombineIPPort(addressA net.IP, addressAPort uint16, addressB net.IP, addressBPort uint16) []byte &#123;</span><br><span class="line">lengthA := len(addressA)</span><br><span class="line">lengthB := len(addressB)</span><br><span class="line">fmt.Println(addressA[0], addressB[0])</span><br><span class="line">var flag bool</span><br><span class="line">for i := 0; i &lt; lengthA &amp;&amp; i &lt; lengthB; i++ &#123;</span><br><span class="line">if addressA[i] &lt; addressB[i] &#123;</span><br><span class="line">flag = true</span><br><span class="line">break</span><br><span class="line">&#125; else if addressA[i] &gt; addressB[i] &#123;</span><br><span class="line">flag = false</span><br><span class="line">break</span><br><span class="line">&#125; else &#123;</span><br><span class="line">if i == lengthA - 1 &#123;</span><br><span class="line">flag = true</span><br><span class="line">&#125; else if i == lengthB - 1 &#123;</span><br><span class="line">flag = false</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">var newAddress []byte</span><br><span class="line">fmt.Println(flag)</span><br><span class="line">fmt.Println(addressA)</span><br><span class="line">fmt.Println(cap(addressA))</span><br><span class="line">if flag &#123;</span><br><span class="line">print(addressA)</span><br><span class="line">print(addressB)</span><br><span class="line">//这里就会出现问题</span><br><span class="line">newAddress = append(addressA, uint16ToBytes(addressAPort)...)</span><br><span class="line">print(newAddress)</span><br><span class="line">newAddress = append(newAddress, addressB...)</span><br><span class="line">newAddress = append(newAddress, uint16ToBytes(addressBPort)...)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">newAddress = append(addressB, uint16ToBytes(addressBPort)...)</span><br><span class="line">newAddress = append(newAddress, addressA...)</span><br><span class="line">newAddress = append(newAddress, uint16ToBytes(addressAPort)...)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(newAddress)</span><br><span class="line">return newAddress</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一般来说函数调用的参数、返回值、局部变量都会被分配到栈上。但golang是静态语言，在编译过程中，编译器会做逃逸分析，如果发现在函数外部有对应的指针指向这些值时，这些值会被分配到堆上，在函数结束后保留，由golang的垃圾回收机制决定何时回收。&lt;/p&gt;
&lt;h3 id=&quot;堆的</summary>
      
    
    
    
    <category term="go" scheme="http://zt-winter.github.io/categories/go/"/>
    
    
    <category term="内存管理" scheme="http://zt-winter.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>反射</title>
    <link href="http://zt-winter.github.io/2022/06/13/reflect/"/>
    <id>http://zt-winter.github.io/2022/06/13/reflect/</id>
    <published>2022-06-12T16:00:00.000Z</published>
    <updated>2022-06-20T15:50:22.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="reflect"><a href="#reflect" class="headerlink" title="reflect"></a>reflect</h1><p>反射是指在程序运行时对程序本身的进行访问和修改的能力。</p><h2 id="type和value"><a href="#type和value" class="headerlink" title="type和value"></a>type和value</h2><p>在golang中对所有的接口反射，都可以得到type和value。而golang中任意数据结构都实现了空接口,也就是说任意数据结构都有reflectt.type和reflect.value。<br>reflect.type表示一个数据结构的类型，这个类型的各种基本信息。reflect.value则表示了运行过程中，该数据结构类型的一个具体实现的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">type test struct&#123;</span><br><span class="line">a int</span><br><span class="line">b string</span><br><span class="line">c map[int]int</span><br><span class="line">d *test</span><br><span class="line">&#125;</span><br><span class="line">a := new(test)</span><br><span class="line">aT := reflect.Typeof(a)</span><br><span class="line">aV := reflect.Valueof(a)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*main.test</span><br><span class="line">0x47e1c0</span><br></pre></td></tr></table></figure><p><a href="https://pkg.go.dev/reflect@go1.18.3#Type">type接口的函数</a></p><p><a href="https://cs.opensource.google/go/go/+/refs/tags/go1.18.3:src/reflect/value.go;l=39">value结构体定义</a></p><p>type和value的相关函数都在前面两处文档中有详细说明，这里不在赘述。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;reflect&quot;&gt;&lt;a href=&quot;#reflect&quot; class=&quot;headerlink&quot; title=&quot;reflect&quot;&gt;&lt;/a&gt;reflect&lt;/h1&gt;&lt;p&gt;反射是指在程序运行时对程序本身的进行访问和修改的能力。&lt;/p&gt;
&lt;h2 id=&quot;type和value</summary>
      
    
    
    
    <category term="go" scheme="http://zt-winter.github.io/categories/go/"/>
    
    
    <category term="reflect" scheme="http://zt-winter.github.io/tags/reflect/"/>
    
  </entry>
  
  <entry>
    <title>文件IO</title>
    <link href="http://zt-winter.github.io/2022/06/06/fileIO/"/>
    <id>http://zt-winter.github.io/2022/06/06/fileIO/</id>
    <published>2022-06-05T16:00:00.000Z</published>
    <updated>2022-06-24T02:48:50.670Z</updated>
    
    <content type="html"><![CDATA[<ul><li>文件一次性全部读取到内存中<ul><li>通过文件名直接读取文件到内存中<ul><li>os: <code>func ReadFile(filename string) ([]byte, error)</code> </li><li>os: <code>func WriteFile(filename string, data []byte, perm FileMode) error</code></li><li>io&#x2F;ioutil: <code>func ReadFile(filename string) ([]byte, error)</code></li><li>io&#x2F;ioutil: <code>func WriteFIle(filename string, data []byte, perm FileMode) error</code></li></ul></li><li>通过文件名获取文件的句柄, 然后通过文件句柄读取文件<ul><li>获取文件句柄<ul><li>os: <code>func OpenFile(name string, flag int, perm FileMode) (*File, error)</code> flag用于指定文件句柄的操作范围，当打开的文件不存在，而flag有os.O_CREATE属性时，就会创建文件，文件的所有者、组、其他人的权限由perm设定</li><li>os: <code>func Open(name string) (*File, error)</code>  Open是OpenFile的简化版，直接读取文件，flag设置为os.O_RDONLY。</li></ul></li><li>通过句柄读取文件<ul><li>os: <code>func (*File) Read(b []byte) (n int, err error)</code> 从文件中读取长度为len(b)的字节到b中，返回读取的字节数大小，如果读到文件末尾，则返回0和io.EOF</li><li>os: <code>func (*File) ReadAt(b []byte, off int64) (n int, err error)</code> 从文件开头起偏移off个字节的地方开始，读取长度为len(b)的字节到b中。</li></ul></li></ul></li></ul></li><li>将文件一部分读入到缓存中,逐份读取<ul><li>io库，定义了这两个接口，并实现了这两个接口的相关函数如<code>func LimitReader(r Reader, n int64) Reader</code> n指定要读取的字节数<ul><li>io.Reader, io.Writer接口  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type Reader interface &#123;</span><br><span class="line">Read(p []byte) (n int, err error)</span><br><span class="line">&#125;</span><br><span class="line">type Writer interface &#123;</span><br><span class="line">Write(p []byte) (n int, err error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>bufio在io的基础上实现了带有缓冲的IO,实现了io.Reader,io.Writer接口  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func NewReader(rd io.Reader) *Reader</span><br><span class="line">func (b *Reader) Read(p []byte) (n int, err error) </span><br></pre></td></tr></table></figure></li><li>实现io.Reader,io.Writer接口的有：os.File, strings.Reader, net.conn, net.Buffers。os.File 可以通过os.Open()得到。strings.Read 可以通过strings.NewReader()得到。net.conn 可以通过net.Dail()得到</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;文件一次性全部读取到内存中&lt;ul&gt;
&lt;li&gt;通过文件名直接读取文件到内存中&lt;ul&gt;
&lt;li&gt;os: &lt;code&gt;func ReadFile(filename string) ([]byte, error)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;os: &lt;code&gt;f</summary>
      
    
    
    
    <category term="go" scheme="http://zt-winter.github.io/categories/go/"/>
    
    
    <category term="IO" scheme="http://zt-winter.github.io/tags/IO/"/>
    
    <category term="file" scheme="http://zt-winter.github.io/tags/file/"/>
    
  </entry>
  
  <entry>
    <title>基本数据结构</title>
    <link href="http://zt-winter.github.io/2022/05/07/data_struct/"/>
    <id>http://zt-winter.github.io/2022/05/07/data_struct/</id>
    <published>2022-05-06T16:00:00.000Z</published>
    <updated>2022-06-20T15:39:41.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GO基本数据结构"><a href="#GO基本数据结构" class="headerlink" title="GO基本数据结构"></a>GO基本数据结构</h1><ul><li><p>string</p><ul><li><p>go语言的字符串无法直接修改每一个字符元素，只能通过重新构造新的字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import(</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">test := &quot;hello world&quot;</span><br><span class="line">test1 := []byte(test)</span><br><span class="line">for i := 6; i &lt; 8; i++ &#123;</span><br><span class="line">test1[i] = &#x27; &#x27;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(string(test1))</span><br><span class="line">fmt.Println(test)</span><br><span class="line">test2 := []byte(test)</span><br><span class="line">test2[0] = &#x27;f&#x27;</span><br><span class="line">test2[1] = &#x27;u&#x27;</span><br><span class="line">test2[2] = &#x27;c&#x27;</span><br><span class="line">test2[3] = &#x27;k&#x27;</span><br><span class="line">test2[4] = &#x27; &#x27;</span><br><span class="line">fmt.Println(string(test2))</span><br><span class="line"></span><br><span class="line">hello   rld</span><br><span class="line">hello world</span><br><span class="line">fuck  world</span><br></pre></td></tr></table></figure></li></ul></li><li><p>array &amp;&amp; slice</p><ul><li><p>数组的数据类型是[length]int，length是一个确定的数字。数组是具有相同 唯一类型 的一组以编号且长度固定的数据项序列（这是一种同构的数据结构）；这种类型可以是任意的原始类型例如整型、字符串或者自定义类型。数组长度必须是一个常量表达式，并且必须是一个非负整数。数组长度也是数组类型的一部分，所以 [5] int s和 [10] int 是属于不同类型的。</p></li><li><p>数组的长度一旦确定就不能更改，这与C&#x2F;C++有很大的不同。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//因此下面这种代码是错的，在编译环节就过不去</span><br><span class="line">func test(length int)&#123;</span><br><span class="line">var array[length]int</span><br><span class="line">=================================</span><br><span class="line">func test()&#123;</span><br><span class="line">length := 10</span><br><span class="line">var array[length]int</span><br></pre></td></tr></table></figure><ul><li>切片不一样，切片本质是指针，切片的数据类型是[]int，切片的初始化一般通过数组创建<code> sliceOne := array[0:1]</code>，也可以直接初始化赋值<code> var sliceTwo []int = []int&#123;10,11,12,13,14,15&#125;</code>，还可以通过make创建，这个后面再说。</li></ul><p>下面的代码可以说明一些性质</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;array: %p\n&quot;</span>, &amp;array)</span><br><span class="line"><span class="keyword">var</span> sliceOne = array[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line">fmt.Println(reflect.TypeOf(sliceOne))</span><br><span class="line">fmt.Printf(<span class="string">&quot;sliceOne: %p\n&quot;</span>, sliceOne)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(sliceOne); i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, sliceOne[i])</span><br><span class="line">&#125;</span><br><span class="line">    sliceOne[<span class="number">4</span>] = <span class="number">100</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;slicOne: %p\n&quot;</span>, sliceOne)</span><br><span class="line">sliceOne = <span class="built_in">append</span>(sliceOne, <span class="number">5</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;sliceOne: %p\n&quot;</span>, sliceOne)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(sliceOne); i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, sliceOne[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sliceTwo []<span class="type">int</span> = []<span class="type">int</span>&#123;<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;sliceTwo: %p\n&quot;</span>, sliceTwo)</span><br><span class="line">sliceTwo = sliceOne</span><br><span class="line">    fmt.Printf(<span class="string">&quot;sliceTwo: %p\n&quot;</span>, sliceTwo)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(sliceTwo); i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, sliceTwo[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">=========编译执行==========</span><br><span class="line">array: <span class="number">0xc00000a4b0</span></span><br><span class="line">[]<span class="type">int</span></span><br><span class="line">sliceOne: <span class="number">0xc00000a4b0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">sliceOne: <span class="number">0xc00000a4b0</span>, array[<span class="number">4</span>]=<span class="number">100</span></span><br><span class="line">sliceOne: <span class="number">0xc000010410</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">sliceTwo: <span class="number">0xc00000a510</span></span><br><span class="line">sliceTwo: <span class="number">0xc000010410</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li><p>使用数组给切片sliceOne初始化时，sliceOne的值与&amp;array的值是一样的，对sliceOne[i]中的值就行修改时，array中对应的值也会修改。但sliceOne的长度发生变化时，sliceOne的地址就会发生变化。相当于在新开的内存区域创建了一个新的C&#x2F;C++数组。切片也可以互相赋值，如sliceTwo&#x3D;sliceOne，但要注意，这样0xc00000a510的值就再也没有指针指向它，无法释放，造成了内存使用不安全。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// one是一个一维数组，ans是一个二维数组</span><br><span class="line">onecopy := make([]int, len(one))</span><br><span class="line">copy(onecopy, one)</span><br><span class="line">ans = append(ans, onecopy)</span><br><span class="line">//或者</span><br><span class="line">ans = append(ans, append([]int&#123;&#125;, path...))</span><br></pre></td></tr></table></figure></li><li><p>二维切片需要注意的地方</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = [][]<span class="type">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;, &#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;, &#123;<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> testOne [][]<span class="type">int</span> = test[<span class="number">1</span>:<span class="number">4</span>][:]</span><br><span class="line"><span class="comment">/* testOne的值</span></span><br><span class="line"><span class="comment">5, 6, 7, 8</span></span><br><span class="line"><span class="comment">9, 10, 11, 12</span></span><br><span class="line"><span class="comment">13, 14, 15, 16</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testTwo [][]<span class="type">int</span> = testOne[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"><span class="comment">/* testTwo的值</span></span><br><span class="line"><span class="comment">9, 10, 11, 12</span></span><br><span class="line"><span class="comment">13, 14, 15, 16</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//想从4*4的数组中取中心的2*2的数组</span></span><br><span class="line"><span class="keyword">var</span> testerror [][]<span class="type">int</span> = test[<span class="number">1</span>:<span class="number">4</span>][<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line"><span class="comment">//报错&quot;runtime error: slice bounds out of range [:4] with capacity 3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">对二维切片不能同时取两次切片，取一次切片也是对test[]取切片。</span></span><br><span class="line"><span class="comment">var testThree [][]int = test[1:4][1:3]也不是对test[][]同时取了两次切片</span></span><br><span class="line"><span class="comment">实际上的操作是：</span></span><br><span class="line"><span class="comment">var tmp [][]int = test[1:4]</span></span><br><span class="line"><span class="comment">var testThree [][]int = tmp[1:3]</span></span><br><span class="line"><span class="comment">这样可以理解testerror为什么会报错</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//实现从4*4的数组中取中心的2*2的数组</span></span><br><span class="line"><span class="keyword">var</span> testerror [][]<span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">    testerror = <span class="built_in">append</span>(testerror, test[i][<span class="number">1</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure></li><li><p>值得注意的符号</p><ul><li>分号;    GO与C语言一样，采用分号作为一条语句的结束，但GO的语法解析器自动在每一行的末尾添加分号，{除外。所以在就会有下面得到语法<code> if firstString, isOk = mapString[tmp]; isOk&#123;</code></li><li>大括号{}    用于初始化</li></ul></li><li><p>hash表，字典，map</p></li></ul><p>map的初始化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mapInstance := <span class="built_in">make</span>(<span class="keyword">map</span>[typeOne]typeTwo)</span><br><span class="line">mapInstance[typeOne] = typeTwo</span><br><span class="line"><span class="comment">//在这里typeOne就是key，typeTwo就是value</span></span><br></pre></td></tr></table></figure><p>使用数组或者切片作为key   <code> mp := map[[26]int][]string&#123;&#125;</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">26</span>]<span class="type">int</span>：数组作为key</span><br><span class="line">[]<span class="type">string</span>：字符串数组作为value</span><br><span class="line">&#123;&#125;：<span class="keyword">map</span>初始化</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GO基本数据结构&quot;&gt;&lt;a href=&quot;#GO基本数据结构&quot; class=&quot;headerlink&quot; title=&quot;GO基本数据结构&quot;&gt;&lt;/a&gt;GO基本数据结构&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;string&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;go语言的字符串无法直接修改</summary>
      
    
    
    
    <category term="go" scheme="http://zt-winter.github.io/categories/go/"/>
    
    
    <category term="基本数据结构" scheme="http://zt-winter.github.io/tags/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>module</title>
    <link href="http://zt-winter.github.io/2022/05/07/module/"/>
    <id>http://zt-winter.github.io/2022/05/07/module/</id>
    <published>2022-05-06T16:00:00.000Z</published>
    <updated>2022-06-20T15:47:43.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模块-module"><a href="#模块-module" class="headerlink" title="模块 module"></a>模块 module</h1><p>一个基本模块的创建</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># cd ~/code/<span class="keyword">go</span></span><br><span class="line"># mkdir greetings &amp;&amp; cd greetings</span><br><span class="line"># <span class="keyword">go</span> mod init test.com/greetings</span><br><span class="line"><span class="keyword">go</span>: creating <span class="built_in">new</span> <span class="keyword">go</span>.mod: module test.com/greetings</span><br><span class="line"># vim greetings.<span class="keyword">go</span></span><br><span class="line"><span class="comment">//函数首字母大写，表示该函数可以被其他包调用</span></span><br><span class="line"><span class="keyword">package</span> greetings</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hello</span><span class="params">(name <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">        message := fmt.Sprintf(<span class="string">&quot;Hi, %v. welcome!&quot;</span>, name)</span><br><span class="line">        <span class="keyword">return</span> message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要有main package，但go mod init &quot;模块名&quot; 模块名任意</span></span><br><span class="line"># <span class="keyword">go</span> build </span><br><span class="line"># ./<span class="string">&quot;模块名&quot;</span></span><br></pre></td></tr></table></figure><p>一个模块调用另一个模块</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># cd ~/code/<span class="keyword">go</span></span><br><span class="line"># mkdir hello &amp;&amp; cd hello</span><br><span class="line"># <span class="keyword">go</span> mod init test.com/hello</span><br><span class="line"><span class="keyword">go</span>: creating <span class="built_in">new</span> <span class="keyword">go</span>.mod: module test.com/hello</span><br><span class="line"># vim hello.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">        <span class="string">&quot;test.com/greetings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        message := greetings.Hello(<span class="string">&quot;Gladys&quot;</span>)</span><br><span class="line">        fmt.Println(message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​上面这种包引用情况是，你将greetings里所有函数打包，然后形成greetings包上传到test.com中，然后在写hello时要调用greetings中的函数，就直接从网上下载，然后使用。但很多时候，一个大项目中许多小项目要互相引用，但有要引用的项目还没有上线，或者两个项目都在一个主机上，那么该如何引用其中的函数呢？这里提供方法，就是相对于本项目，指出要引用的包的路径。</p><p>​这里我们要引用greetings中函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># tree</span><br><span class="line">.</span><br><span class="line">├── greetings</span><br><span class="line">│   ├── <span class="keyword">go</span>.mod</span><br><span class="line">│   └── greetings.<span class="keyword">go</span></span><br><span class="line">├── hello</span><br><span class="line">│   ├── <span class="keyword">go</span>.mod</span><br><span class="line">│   └── hello.<span class="keyword">go</span></span><br><span class="line">└── pkg</span><br><span class="line">    └── mod</span><br><span class="line">        └── cache</span><br><span class="line">            └── lock</span><br><span class="line"><span class="comment">/* 在hello目录的命令提示符下执行下列命令</span></span><br><span class="line"><span class="comment">将go.mod文件中test.com/greetings替换为../greetings</span></span><br><span class="line"><span class="comment">当前目录~/code/go/hello，那么../greetings就是</span></span><br><span class="line"><span class="comment">~/code/go/greetings目录</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"># <span class="keyword">go</span> mod edit -replace test.com/greetings=../greetings</span><br><span class="line"></span><br><span class="line"><span class="comment">/*在hello目录的命令提示符下执行下列命令</span></span><br><span class="line"><span class="comment">该命令会在刷新同步test.com/hello模块的依赖，</span></span><br><span class="line"><span class="comment">自动添加不全所需要的代码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"># <span class="keyword">go</span> mod tidy</span><br><span class="line"><span class="keyword">go</span>: found test.com/greetings in test.com/greetings v0<span class="number">.0</span><span class="number">.0</span><span class="number">-00010101000000</span><span class="number">-000000000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这之后go.mod文件的内容</span></span><br><span class="line">module test.com/hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.17</span></span><br><span class="line"></span><br><span class="line">replace test.com/greetings =&gt; ../greetings</span><br><span class="line"></span><br><span class="line">require test.com/greetings v0<span class="number">.0</span><span class="number">.0</span><span class="number">-00010101000000</span><span class="number">-000000000000</span></span><br><span class="line"># <span class="keyword">go</span> run .</span><br><span class="line">Hi, Gladys. welcome!</span><br></pre></td></tr></table></figure><p>这里我们继续添加一个模块，模块位于hello模块中。目录结构如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># mkdir ./hello/submodule</span><br><span class="line"># tree</span><br><span class="line">├── greetings</span><br><span class="line">│   ├── go.mod</span><br><span class="line">│   └── greetings.go</span><br><span class="line">├── hello</span><br><span class="line">│   ├── go.mod</span><br><span class="line">│   ├── hello</span><br><span class="line">│   ├── hello.go</span><br><span class="line">│   └── submodule</span><br><span class="line">└── pkg</span><br><span class="line">    └── mod</span><br><span class="line">        └── cache</span><br><span class="line">            └── lock</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我们在submodule文件夹下开始新的模块的建立</span></span><br><span class="line"># <span class="keyword">go</span> mod init test.com/submodule</span><br><span class="line"># vim submodule.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> submodule</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;This is a test module&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//然后我们回到hello目录下</span></span><br><span class="line"># vim hello.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">        <span class="string">&quot;test.com/greetings&quot;</span></span><br><span class="line">        <span class="string">&quot;test.com/submodule&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        message := greetings.Hello(<span class="string">&quot;Gladys&quot;</span>)</span><br><span class="line">        fmt.Println(message)</span><br><span class="line">        submodule.Test()</span><br><span class="line">&#125;</span><br><span class="line"># <span class="keyword">go</span> mod edit -replace test.com/submodule=./submodule</span><br><span class="line"># <span class="keyword">go</span> mod tidy</span><br><span class="line"><span class="keyword">go</span>: found test.com/submodule in test.com/submodule v0<span class="number">.0</span><span class="number">.0</span><span class="number">-00010101000000</span><span class="number">-000000000000</span></span><br><span class="line"># <span class="keyword">go</span> run .</span><br><span class="line">Hi, Gladys. welcome!</span><br><span class="line">This is a test module</span><br></pre></td></tr></table></figure><h2 id="在同一个项目下"><a href="#在同一个项目下" class="headerlink" title="在同一个项目下"></a>在同一个项目下</h2><p><strong>注意</strong>：在一个项目（project）下我们是可以定义多个包（package）的。</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>现在的情况是，我们在<code>moduledemo/main.go</code>中调用了<code>mypackage</code>这个包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">moduledemo</span><br><span class="line">├── go.mod</span><br><span class="line">├── main.go</span><br><span class="line">└── mypackage</span><br><span class="line">    └── mypackage.go</span><br></pre></td></tr></table></figure><h3 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h3><p>这个时候，我们需要在<code>moduledemo/go.mod</code>中按如下定义：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module moduledemo</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.14</span></span><br></pre></td></tr></table></figure><p>然后在<code>moduledemo/main.go</code>中按如下方式导入<code>mypackage</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;moduledemo/mypackage&quot;</span>  <span class="comment">// 导入同一项目下的mypackage包</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    mypackage.New()</span><br><span class="line">    fmt.Println(<span class="string">&quot;main&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p>举一反三，假设我们现在有文件目录结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">└── bubble</span><br><span class="line">    ├── dao</span><br><span class="line">    │   └── mysql.go</span><br><span class="line">    ├── go.mod</span><br><span class="line">    └── main.go</span><br></pre></td></tr></table></figure><p>其中<code>bubble/go.mod</code>内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module github.com/q1mi/bubble</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.14</span></span><br></pre></td></tr></table></figure><p><code>bubble/dao/mysql.go</code>内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;mypackage.New&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>bubble/main.go</code>内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/q1mi/bubble/dao&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    dao.New()</span><br><span class="line">    fmt.Println(<span class="string">&quot;main&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不在同一个项目下"><a href="#不在同一个项目下" class="headerlink" title="不在同一个项目下"></a>不在同一个项目下</h2><h3 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── moduledemo</span><br><span class="line">│   ├── go.mod</span><br><span class="line">│   └── main.go</span><br><span class="line">└── mypackage</span><br><span class="line">    ├── go.mod</span><br><span class="line">    └── mypackage.go</span><br></pre></td></tr></table></figure><h3 id="导入包-1"><a href="#导入包-1" class="headerlink" title="导入包"></a>导入包</h3><p>这个时候，<code>mypackage</code>也需要进行module初始化，即拥有一个属于自己的<code>go.mod</code>文件，内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module mypackage</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.14</span></span><br></pre></td></tr></table></figure><p>然后我们在<code>moduledemo/main.go</code>中按如下方式导入：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;mypackage&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    mypackage.New()</span><br><span class="line">    fmt.Println(<span class="string">&quot;main&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这两个包不在同一个项目路径下，你想要导入本地包，并且这些包也没有发布到远程的github或其他代码仓库地址。这个时候我们就需要在<code>go.mod</code>文件中使用<code>replace</code>指令。</p><p>在调用方也就是<code>packagedemo/go.mod</code>中按如下方式指定使用<strong>相对路径</strong>来寻找<code>mypackage</code>这个包。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module moduledemo</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.14</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">require <span class="string">&quot;mypackage&quot;</span> v0<span class="number">.0</span><span class="number">.0</span></span><br><span class="line">replace <span class="string">&quot;mypackage&quot;</span> =&gt; <span class="string">&quot;../mypackage&quot;</span></span><br></pre></td></tr></table></figure><h3 id="举个例子-1"><a href="#举个例子-1" class="headerlink" title="举个例子"></a>举个例子</h3><p>最后我们再举个例子巩固下上面的内容。</p><p>我们现在有文件目录结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── p1</span><br><span class="line">│   ├── go.mod</span><br><span class="line">│   └── main.go</span><br><span class="line">└── p2</span><br><span class="line">    ├── go.mod</span><br><span class="line">    └── p2.go</span><br></pre></td></tr></table></figure><p><code>p1/main.go</code>中想要导入<code>p2.go</code>中定义的函数。</p><p><code>p2/go.mod</code>内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module liwenzhou.com/q1mi/p2</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.14</span></span><br></pre></td></tr></table></figure><p><code>p1/main.go</code>中按如下方式导入</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;liwenzhou.com/q1mi/p2&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p2.New()</span><br><span class="line">    fmt.Println(<span class="string">&quot;main&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我并没有把<code>liwenzhou.com/q1mi/p2</code>这个包上传到<code>liwenzhou.com</code>这个网站，我们只是想导入本地的包，这个时候就需要用到<code>replace</code>这个指令了。</p><p><code>p1/go.mod</code>内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module github.com/q1mi/p1</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.14</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">require <span class="string">&quot;liwenzhou.com/q1mi/p2&quot;</span> v0<span class="number">.0</span><span class="number">.0</span></span><br><span class="line">replace <span class="string">&quot;liwenzhou.com/q1mi/p2&quot;</span> =&gt; <span class="string">&quot;../p2&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;模块-module&quot;&gt;&lt;a href=&quot;#模块-module&quot; class=&quot;headerlink&quot; title=&quot;模块 module&quot;&gt;&lt;/a&gt;模块 module&lt;/h1&gt;&lt;p&gt;一个基本模块的创建&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;</summary>
      
    
    
    
    <category term="go" scheme="http://zt-winter.github.io/categories/go/"/>
    
    
    <category term="slice" scheme="http://zt-winter.github.io/tags/slice/"/>
    
  </entry>
  
  <entry>
    <title>参数传递</title>
    <link href="http://zt-winter.github.io/2022/05/06/parameter/"/>
    <id>http://zt-winter.github.io/2022/05/06/parameter/</id>
    <published>2022-05-05T16:00:00.000Z</published>
    <updated>2022-06-20T15:49:32.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h1><h2 id="GO中参数传递只有值传递，没有参数传递"><a href="#GO中参数传递只有值传递，没有参数传递" class="headerlink" title="GO中参数传递只有值传递，没有参数传递"></a>GO中参数传递只有值传递，没有参数传递</h2><h3 id="slice-map-chan-在使用时都是指针类型"><a href="#slice-map-chan-在使用时都是指针类型" class="headerlink" title="slice map chan  在使用时都是指针类型"></a>slice map chan  在使用时都是指针类型</h3><p>主函数调用test函数，在函数传递参数时，<code>func test( sliceA  []int)</code>，sliceA就是指针，它和原切片的指针不是同一个东西，两个指针指向同一个slice，但所在的位置不同。由于slice创建时，自身就有cap和len两个参数。如果只是对原有slice中数值进行修改，那么是没有问题的，主函数中slice也会修改。但如果进行扩容操作，如append，如果cap改变了，那么就会在新的slice上进行操作，返回新的slice地址。主函数中的slice地址就不会修改。</p><p>如果传递的参数是slice的地址，<code> func test ( sliceA *[]int)</code>。在进行扩容操作后，新的slice地址也会赋值给slice，相当于主函数中slice指针指向了新的slice地址。</p><p>所以 __在GO中没有按参数传递，只有指针的副本传递和值的副本传递__。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参数传递&quot;&gt;&lt;a href=&quot;#参数传递&quot; class=&quot;headerlink&quot; title=&quot;参数传递&quot;&gt;&lt;/a&gt;参数传递&lt;/h1&gt;&lt;h2 id=&quot;GO中参数传递只有值传递，没有参数传递&quot;&gt;&lt;a href=&quot;#GO中参数传递只有值传递，没有参数传递&quot; class</summary>
      
    
    
    
    <category term="go" scheme="http://zt-winter.github.io/categories/go/"/>
    
    
    <category term="内存" scheme="http://zt-winter.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
    <category term="parameter" scheme="http://zt-winter.github.io/tags/parameter/"/>
    
  </entry>
  
  <entry>
    <title>append与切片</title>
    <link href="http://zt-winter.github.io/2022/04/28/append/"/>
    <id>http://zt-winter.github.io/2022/04/28/append/</id>
    <published>2022-04-27T16:00:00.000Z</published>
    <updated>2023-07-25T02:56:19.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="append函数"><a href="#append函数" class="headerlink" title="append函数"></a>append函数</h1><p>append函数原型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(slice []Type, elems ...Type)</span></span> []Type</span><br></pre></td></tr></table></figure><p>内置函数append可以在切片末尾添加元素。如果切片有足够的空间，后面的空间会分配给新的元素。如果没有足够空间，就会一个新的隐含数组会被分配出来，然后将所有的元素复制到新的隐含数组中，然后返回这个隐含数组的头部指针（或者说新的切片）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> slice []<span class="type">int</span> = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> slices [][]<span class="type">int</span> = [][]<span class="type">int</span>&#123;&#123;<span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>&#125;&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;go中一个字节8位\n&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;字节数为%d\n&quot;</span>, unsafe.Sizeof(slice[<span class="number">0</span>]))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;slices的空间为%d\n&quot;</span>, <span class="built_in">cap</span>(slices[<span class="number">0</span>]))</span><br><span class="line">fmt.Printf(<span class="string">&quot;%p %p %p\n&quot;</span>, slices[<span class="number">0</span>], slices[<span class="number">1</span>], slices[<span class="number">2</span>])</span><br><span class="line">slices = <span class="built_in">append</span>(slices, slice)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%p %p %p %p\n&quot;</span>, slices[<span class="number">0</span>], slices[<span class="number">1</span>], slices[<span class="number">2</span>], slices[<span class="number">3</span>])</span><br><span class="line"><span class="keyword">var</span> slicesTwo [][]<span class="type">int</span> = <span class="built_in">append</span>([][]<span class="type">int</span>&#123;slice&#125;, slices...)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%p %p %p %p\n&quot;</span>, slicesTwo[<span class="number">0</span>], slicesTwo[<span class="number">1</span>], slicesTwo[<span class="number">2</span>], slicesTwo[<span class="number">3</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是append正确的使用方法。<code> slices = append(slices, slice)</code>是将slice切片添加到slices二维切片的后面。如果要将slice添加到slices的前面，应该是</p><p><code> var sliceTwo [][]int = append([][]int&#123;slice&#125;, slices...)</code></p><p><code> [][]int&#123;slice&#125;</code>是新建了一个二维切片，然后切片的初始化了一个元素（一个一维切片）。</p><p><code> slices...</code>是将slices中每一个元素全部列出来作为参数，也就是<code> elem ...Type</code>。</p><p>最后slices和sliceTwo的值为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">slices-&gt;</span><br><span class="line">[0]:[3,4]</span><br><span class="line">[1]:[5,6]</span><br><span class="line">[2]:[7,8]</span><br><span class="line">[3]:[1,2,3]</span><br><span class="line">sliceTwo-&gt;</span><br><span class="line">[0]:[1,2,3]</span><br><span class="line">[1]:[3,4]</span><br><span class="line">[2]:[5,6]</span><br><span class="line">[3]:[7,8]</span><br><span class="line">[4]:[1,2,3]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//程序输出</span><br><span class="line">go中一个字节8位</span><br><span class="line">字节数为8</span><br><span class="line">0xc0000160a0 0xc0000160b0 0xc0000160c0</span><br><span class="line">0xc0000160a0 0xc0000160b0 0xc0000160c0 0xc00000e168</span><br><span class="line">0xc00000e168 0xc0000160a0 0xc0000160b0 0xc0000160c0</span><br></pre></td></tr></table></figure><p>0xc0000160a0 + </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;append函数&quot;&gt;&lt;a href=&quot;#append函数&quot; class=&quot;headerlink&quot; title=&quot;append函数&quot;&gt;&lt;/a&gt;append函数&lt;/h1&gt;&lt;p&gt;append函数原型&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;t</summary>
      
    
    
    
    <category term="go" scheme="http://zt-winter.github.io/categories/go/"/>
    
    
    <category term="slice" scheme="http://zt-winter.github.io/tags/slice/"/>
    
  </entry>
  
</feed>
