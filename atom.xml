<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://zt-winter.github.io/atom.xml" rel="self"/>
  
  <link href="http://zt-winter.github.io/"/>
  <updated>2025-05-20T02:37:29.119Z</updated>
  <id>http://zt-winter.github.io/</id>
  
  <author>
    <name>月的奏鸣曲</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>modsecurity环境配置</title>
    <link href="http://zt-winter.github.io/2025/05/20/modsecurity/"/>
    <id>http://zt-winter.github.io/2025/05/20/modsecurity/</id>
    <published>2025-05-19T16:00:00.000Z</published>
    <updated>2025-05-20T02:37:29.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="modsecurity-nginx-dvwa安装配置"><a href="#modsecurity-nginx-dvwa安装配置" class="headerlink" title="modsecurity+nginx+dvwa安装配置"></a>modsecurity+nginx+dvwa安装配置</h1><p>下载nginx与modsecurity</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载modsecurity并安装</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:owasp-modsecurity/ModSecurity.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载nginx和modsecurity的nginx插件</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.26.1.tar.gz</span><br><span class="line">tar -zxvf nginx-1.26.1.tar.gz</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/SpiderLabs/ModSecurity-nginx</span><br><span class="line"><span class="built_in">cd</span> nginx-1.26.1</span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">./configure --add-module=../Modsecurity-nginx --with-http_ssl_module</span><br><span class="line">make -j 8</span><br><span class="line">sudo make install </span><br></pre></td></tr></table></figure><p>安装dvwa及相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/git</span><br><span class="line">wget https://github.com/digininja/DVWA/archive/master.zip</span><br><span class="line">unzip master.zip -d dvwa</span><br><span class="line"><span class="built_in">mv</span> dvwa /usr/local/nginx/html</span><br><span class="line">sudo pacman -S apache php php-apache mariadb php-gd php-sqlite</span><br><span class="line"><span class="comment"># 启动apache服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> httpd</span><br><span class="line">systemctl start httpd</span><br><span class="line">sudo mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql</span><br><span class="line"><span class="comment"># 安装mariadb数据库</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mariadb</span><br><span class="line">systemctl start mariadb</span><br><span class="line">sudo mysql_secure_installation</span><br><span class="line">sudo mysql -u root -p</span><br><span class="line"><span class="comment"># 去除extension中mysqli\gd\sqlite3\pdo_mysql注释</span></span><br><span class="line">sudo vim /etc/php/php.ini</span><br><span class="line">sudo <span class="built_in">chown</span> -R http:http /usr/local/nginx/html/dvwa</span><br><span class="line">sudo <span class="built_in">chown</span> -R 755 /usr/local/nginx/html/dvwa</span><br><span class="line"><span class="comment"># 修改php的用户和分组，保持和nginx一致</span></span><br><span class="line">sudo vim /etc/php/php-fpm.d/www.conf</span><br><span class="line"><span class="comment"># 加上LoadModule php_module modules/libphp.so</span></span><br><span class="line">sudo vim /etc/httpd/conf/httpd.conf</span><br><span class="line"><span class="comment"># dvwa的配置文件，修改用户、密码、IP端口、防护级别等</span></span><br><span class="line">sudo vim /usr/local/nginx/html/dvwa/config/config.inc.php</span><br><span class="line"></span><br><span class="line"><span class="comment">#apache服务在启动时会在/var/run/中创建文件夹，可以在启动服务中添加创建目录命令，避免找不到目录和文件</span></span><br><span class="line">vim /usr/lib/systemd/system/php8.4-fpm.service</span><br><span class="line">[Service]</span><br><span class="line">ExecStartPre=/bin/install -d /var/run/php-fpm -o root -g root -m 751 </span><br></pre></td></tr></table></figure><p>modsecurity规则文件整合及配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/nginx/conf/modsec</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:coreruleset/coreruleset.git</span><br><span class="line"><span class="built_in">cd</span> coreruleset/rules</span><br><span class="line"><span class="built_in">cat</span> *.conf &gt;&gt; modsecurity-crs.conf</span><br><span class="line"><span class="built_in">cp</span> * /usr/local/nginx/conf/modsec/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ModSecurity</span><br><span class="line"><span class="built_in">cp</span> modsecurity.conf-recommanded /usr/local/nginx/conf/modsec/</span><br><span class="line"><span class="built_in">cd</span> coreruleset</span><br><span class="line"><span class="built_in">cp</span> crs-setup.conf.example /usr/local/nginx/conf/modsec/</span><br><span class="line"><span class="built_in">cd</span> /usr/local/nginx/conf/modsec</span><br><span class="line"><span class="built_in">mv</span> modsecurity.conf-recommanded modsecurity.conf</span><br><span class="line"><span class="built_in">mv</span> crs-setup.conf.example crs-setup.conf</span><br></pre></td></tr></table></figure><p>nginx配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    #监控本地80端口</span><br><span class="line">listen 80;</span><br><span class="line">server_name localhost;</span><br><span class="line">modsecurity on;</span><br><span class="line">    #加载核心规则集启动配置</span><br><span class="line">modsecurity_rules_file /usr/local/nginx/conf/modsec/crs-setup.conf;</span><br><span class="line">    #加载配置文件</span><br><span class="line">modsecurity_rules_file /usr/local/nginx/conf/modsec/modsecurity.conf;</span><br><span class="line">modsecurity_rules_file /usr/local/nginx/conf/modsec/modsecurity-crs.conf;</span><br><span class="line">#nginx加载modsecurity不支持使用通配符匹配多个文件</span><br><span class="line">#modsecurity_rules_file /usr/local/nginx/conf/modsec/crs/rules/*.conf;</span><br><span class="line">    #设置代理</span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://localhost:8080;</span><br><span class="line">proxy_set_header Host $host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">proxy_set_header ModSecurity-enabled &quot;1&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;modsecurity-nginx-dvwa安装配置&quot;&gt;&lt;a href=&quot;#modsecurity-nginx-dvwa安装配置&quot; class=&quot;headerlink&quot; title=&quot;modsecurity+nginx+dvwa安装配置&quot;&gt;&lt;/a&gt;modsecur</summary>
      
    
    
    
    <category term="security" scheme="http://zt-winter.github.io/categories/security/"/>
    
    
    <category term="modsecurity" scheme="http://zt-winter.github.io/tags/modsecurity/"/>
    
    <category term="WAF" scheme="http://zt-winter.github.io/tags/WAF/"/>
    
  </entry>
  
  <entry>
    <title>container库</title>
    <link href="http://zt-winter.github.io/2025/05/19/container/"/>
    <id>http://zt-winter.github.io/2025/05/19/container/</id>
    <published>2025-05-19T05:41:26.969Z</published>
    <updated>2025-05-19T05:41:26.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="container"><a href="#container" class="headerlink" title="container"></a>container</h1><pre><code>该库主要是实现三个数据结构</code></pre><ul><li>list : 双向链表</li><li>heap : 最小堆</li><li>ring : 环形链表</li></ul><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>可以用list双向链表实现栈的操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import(</span><br><span class="line">&quot;container/list&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//stack初始化</span><br><span class="line">stack := list.New()</span><br><span class="line"></span><br><span class="line">//压栈操作</span><br><span class="line">stack.PushBack(value)</span><br><span class="line"></span><br><span class="line">//出栈操作</span><br><span class="line">e := stack.Back()</span><br><span class="line">if e != nil &#123;</span><br><span class="line">stack.Remove(e)</span><br><span class="line">&#125;</span><br><span class="line">return e.Value</span><br><span class="line"></span><br><span class="line">//获取栈顶元素</span><br><span class="line">e := stack.Back()</span><br><span class="line">return e.Value</span><br><span class="line"></span><br><span class="line">//栈长度</span><br><span class="line">length := stack.Len()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;container&quot;&gt;&lt;a href=&quot;#container&quot; class=&quot;headerlink&quot; title=&quot;container&quot;&gt;&lt;/a&gt;container&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;该库主要是实现三个数据结构
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;</summary>
      
    
    
    
    <category term="go" scheme="http://zt-winter.github.io/categories/go/"/>
    
    
    <category term="container" scheme="http://zt-winter.github.io/tags/container/"/>
    
    <category term="list" scheme="http://zt-winter.github.io/tags/list/"/>
    
    <category term="stack" scheme="http://zt-winter.github.io/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>dfs</title>
    <link href="http://zt-winter.github.io/2025/05/19/leetcode207/"/>
    <id>http://zt-winter.github.io/2025/05/19/leetcode207/</id>
    <published>2025-05-19T05:41:26.969Z</published>
    <updated>2025-05-19T05:41:26.969Z</updated>
    
    <content type="html"><![CDATA[<p>深度优先搜索算法一般用于树或者图的结构中，在写代码时有下面几个注意的地方。</p><p>leetcode 207题<br>首先读懂题目，课程只有0~crousenum-1门，如果没有课程相互前置，是一定能够学完的。题目就是判断是否有循环依赖。可以使用广度+深度搜索，遍历一个节点所依赖节点，如果所依赖节点也有依赖则继续判断。</p><p>这里每个节点在遍历时赋予了属性：未检索、正在检索、已经完成检索。为什么不是设置未检索和已经完成检索两个值。主要原因是需要判断是否有相互依赖。设置已经完成检索需要在完成该节点的依赖遍历后，但遍历的节点如果依赖正在的遍历的节点，那只设置两个值的话，就会检测不出来。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">canFinish(numCourses <span class="type">int</span>, prerequisites [][]<span class="type">int</span>) <span class="type">bool</span> &#123;</span><br><span class="line">    depend := <span class="built_in">make</span>([][]<span class="type">int</span>, numCourses)</span><br><span class="line">flag := <span class="built_in">make</span>([]<span class="type">int</span>, numCourses)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(prerequisites); i++ &#123;</span><br><span class="line">depend[prerequisites[i][<span class="number">0</span>]] = <span class="built_in">append</span>(depend[prerequisites[i][<span class="number">0</span>]], prerequisites[i][<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">bool</span></span><br><span class="line">dfs = <span class="function"><span class="keyword">func</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">if</span> flag[n] == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">flag[n] = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(depend[n]); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> flag[depend[n][i]] == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> flag[depend[n][i]] == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> !dfs(depend[n][i]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">flag[n] = <span class="number">2</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numCourses; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> flag[i] != <span class="number">2</span> &amp;&amp; !dfs(i) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;深度优先搜索算法一般用于树或者图的结构中，在写代码时有下面几个注意的地方。&lt;/p&gt;
&lt;p&gt;leetcode 207题&lt;br&gt;首先读懂题目，课程只有0~crousenum-1门，如果没有课程相互前置，是一定能够学完的。题目就是判断是否有循环依赖。可以使用广度+深度搜索，遍历一</summary>
      
    
    
    
    <category term="algorithm" scheme="http://zt-winter.github.io/categories/algorithm/"/>
    
    
    <category term="拓扑排序" scheme="http://zt-winter.github.io/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
    <category term="dfs" scheme="http://zt-winter.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>linux-wifi</title>
    <link href="http://zt-winter.github.io/2025/05/19/linux-wifi/"/>
    <id>http://zt-winter.github.io/2025/05/19/linux-wifi/</id>
    <published>2025-05-19T05:41:26.969Z</published>
    <updated>2025-05-19T05:41:26.969Z</updated>
    
    <content type="html"><![CDATA[<p>主机上装了双系统，昨天晚上使用windows10打完游戏后，今天进入Linux发现没有无线网卡设备，报错信息为<code>kernel iwlwifi: probe of failed with error -110</code>。</p><p>搜索相关报错信息后发现原因为windows10为了快速启动，即使关闭windows也不会释放网卡设备，以便下次启动时不用再次加载网卡驱动，但这导致linux启动时发现网卡设备被占用，无法使用网卡设备。</p><p>解决方法：windows10进入控制面板，打开电源设置，关闭快速启动。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主机上装了双系统，昨天晚上使用windows10打完游戏后，今天进入Linux发现没有无线网卡设备，报错信息为&lt;code&gt;kernel iwlwifi: probe of failed with error -110&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;搜索相关报错信息后发现原因</summary>
      
    
    
    
    <category term="linux" scheme="http://zt-winter.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="http://zt-winter.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>前缀及其优化</title>
    <link href="http://zt-winter.github.io/2025/05/19/%E5%89%8D%E7%BC%80/"/>
    <id>http://zt-winter.github.io/2025/05/19/%E5%89%8D%E7%BC%80/</id>
    <published>2025-05-19T05:41:26.969Z</published>
    <updated>2025-05-19T05:41:26.969Z</updated>
    
    <content type="html"><![CDATA[<p>有些问题可以转化为两个前缀进行简单计算得到结果，如：一个数组子数组的和为K的个数，子数组的和，可以转化为两个前缀数组相减。<br>类似题目有：<br><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">leetcode 209</a><br><a href="https://leetcode.cn/problems/subarray-sum-equals-k/comments/">leetcode 560</a><br><a href="https://leetcode.cn/problems/shortest-subarray-with-sum-at-least-k/">leetcode 862</a></p><p>以leetcode 560题为例<br>subsum &#x3D; sum[i] - sum[j]<br>因此可以使用两次循环遍历获得，这么做时间复杂度为O(n2)。</p><p>可以在此基础上，进一步优化。在第一次循环中，我们已知sum[i]，subsum的目标值k，同时j&lt;i。因此可以使用map，来检索是否存在sum[j]。时间复杂度降为O(n)。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">subarraySum</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    length := <span class="built_in">len</span>(nums)</span><br><span class="line">    sum := <span class="built_in">make</span>([]<span class="type">int</span>, length)</span><br><span class="line">    sum[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; length; i++ &#123;</span><br><span class="line">        sum[i] = sum[i<span class="number">-1</span>] + nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">    pre := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">    ret := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> sum[i] == k &#123;</span><br><span class="line">            ret++</span><br><span class="line">        &#125;</span><br><span class="line">        one := sum[i] - k</span><br><span class="line">        <span class="keyword">if</span> value, ok := pre[one]; ok &#123;</span><br><span class="line">            ret += value</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> _, ok := pre[sum[i]]; ok &#123;</span><br><span class="line">            pre[sum[i]] += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre[sum[i]] = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标准答案中的代码更加简洁，也节省了时间、空间,sum已经存储到map中不必再使用[]int,节省空间,同时将sum的计算与判断是否有子数组放到一个循环里，节省了时间</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">subarraySum</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    count, pre := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    m := <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    m[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        pre += nums[i]</span><br><span class="line">        <span class="keyword">if</span> _, ok := m[pre - k]; ok &#123;</span><br><span class="line">            count += m[pre - k]</span><br><span class="line">        &#125;</span><br><span class="line">        m[pre] += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>209题可以使用双指针滑动窗口，但560题则不行，因为560题中是整数，既有正数，也有负数，窗口的移动需要一步一迭代，窗口大小单调增长.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有些问题可以转化为两个前缀进行简单计算得到结果，如：一个数组子数组的和为K的个数，子数组的和，可以转化为两个前缀数组相减。&lt;br&gt;类似题目有：&lt;br&gt;&lt;a href=&quot;https://leetcode.cn/problems/minimum-size-subarray-su</summary>
      
    
    
    
    <category term="algorithm" scheme="http://zt-winter.github.io/categories/algorithm/"/>
    
    
    <category term="hash" scheme="http://zt-winter.github.io/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>投资笔记与思考-周期股</title>
    <link href="http://zt-winter.github.io/2025/05/19/invest2-cyclicalStock/"/>
    <id>http://zt-winter.github.io/2025/05/19/invest2-cyclicalStock/</id>
    <published>2025-05-18T16:00:00.000Z</published>
    <updated>2025-05-20T01:01:03.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="投资笔记与思考-周期股"><a href="#投资笔记与思考-周期股" class="headerlink" title="投资笔记与思考-周期股"></a>投资笔记与思考-周期股</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;投资笔记与思考-周期股&quot;&gt;&lt;a href=&quot;#投资笔记与思考-周期股&quot; class=&quot;headerlink&quot; title=&quot;投资笔记与思考-周期股&quot;&gt;&lt;/a&gt;投资笔记与思考-周期股&lt;/h1&gt;</summary>
      
    
    
    
    <category term="investment" scheme="http://zt-winter.github.io/categories/investment/"/>
    
    
    <category term="investment" scheme="http://zt-winter.github.io/tags/investment/"/>
    
    <category term="stock" scheme="http://zt-winter.github.io/tags/stock/"/>
    
  </entry>
  
  <entry>
    <title>投资笔记与思考-企业估值模型</title>
    <link href="http://zt-winter.github.io/2025/04/23/invest1-valuation/"/>
    <id>http://zt-winter.github.io/2025/04/23/invest1-valuation/</id>
    <published>2025-04-22T16:00:00.000Z</published>
    <updated>2025-05-20T01:01:03.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="投资笔记与思考-企业估值模型"><a href="#投资笔记与思考-企业估值模型" class="headerlink" title="投资笔记与思考-企业估值模型"></a>投资笔记与思考-企业估值模型</h1><p>&amp;emsp;&amp;emsp;大部分投机者投资证券盈利的方式就是高买低卖，即使是投资者，不在乎短期股价波动，在乎企业长期发展和分红，也需要避免在企业估值过高的情况，这时股价下跌带来的亏损远高于分红和企业的营收增长。在合适甚至便宜的价格购买证券，有利于投资者控制风险，如果整体市场大幅下跌，便宜价格购买的证券下跌的空间也会减小。<br>&amp;emsp;&amp;emsp;<em>估值首先需要考虑的就是企业的营业模式。</em>不同的企业经营模式不同，这决定了企业在经营时的风险、毛利率、资本持续投入、负债率不同。最好的企业当然是企业扩张时需要的资本开支很少，即使销量没有增长，也不需要大量资本维持营收的企业。比如可口可乐，它的扩产所需设备不算昂贵，不扩张也只需要保持原有的资本支出即可。比较差的企业是扩张时需要大量的资本投入，同时市场竞争激烈，就算只是维持也需要大量资本的企业。比如半导体制造企业，半导体企业扩张需要大量的土地、贵重的设备，投入资本具体，如果扩张后市场需求发生变化，则会产生巨额亏损，同时像台积电每年都需要把大量利润投入新产品研发中，避免在技术竞争中丧失优势地位，前段时间台积电的价格飞涨主要来与AI带来的强劲需求，但即使如此，台积电在20250518的市盈率也只有25，可以想见国内市盈率到2000多的半导体制造企业被炒作到什么程度，哪怕该企业未来5年年化增长率到100%，也很难填平市盈率，更别说企业营收很难长期保持超高速增长了。<br>&amp;emsp;&amp;emsp;一般来说下消费型企业好于重型制造业企业，因为消费型企业资金回笼比较快，生意涉及的链条比较简单（需要具体看企业供应链情况），且制造业企业的设备非常昂贵，资本开支大，且上下游复杂。消费型企业可以给个基础估值12倍市盈率，然后根据企业的负债情况、营收增长情况、行业地位、管理层是否考虑小投资利益、股息率等动态调整。<br>&amp;emsp;&amp;emsp;因为企业之间千差万别，很难用一个统一的标准去衡量，通过多个不同类型企业的例子去具体分析，可以作为后续对其他企业分析的参考。<br>1.肯德基，它作为一个消费型企业，门店主要是直营或者加盟，在销售时基本是先付钱再交货，这种比制造业部分企业需要先给货，然后等买家几个月一次性结账的情况要好很多。肯德基的快餐消费品牌算的上是top级别的，在一二三线城市有大量的门店，在家乡小县城也有。从股息率上考虑，百盛中国作为运营肯德基中国（还有必胜客）的上市企业，每年有2个点的股息，同时最近一两年都有大规模回购，因为回购是注销型回购，会提高持股人权益，两者合并计算真实股息率在8%左右。需要注意的是由于经济形势问题，一二线城市的社零消费出现了下降，要关注营收增长情况。另外一点是相比于可口可乐，作为快餐店，它需要在大量商业地段的门店运营，在扩张时，需要一定的资本开支。<br>2.隆基绿能，光伏企业由于之前的产业补贴，导致疯狂扩张。在欧盟反倾销后，产能严重过剩，2024年国内的光伏招标价格甚至低于产品成本价。光伏企业在供需关系不平衡的情况下，由于产能没有出清，竞争激烈，光伏企业还在投入大量资本到技术研发中，提高光伏转化率。隆基绿能的股价（20250519）已经大幅下跌，市盈率为-14，市净率为1.94，这个时候是否有入场的机会？从风险的角度来说，尽管股价已经大幅降低，即便以后一年后产能完成出清，供需完成基本平衡，能够扭亏为盈，盈利估计也不高。同时在国际贸易衰退的情况下，不确定性更高。这个时候入场光伏，风险与收益不成正比，选择优先级不高。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;投资笔记与思考-企业估值模型&quot;&gt;&lt;a href=&quot;#投资笔记与思考-企业估值模型&quot; class=&quot;headerlink&quot; title=&quot;投资笔记与思考-企业估值模型&quot;&gt;&lt;/a&gt;投资笔记与思考-企业估值模型&lt;/h1&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;大部</summary>
      
    
    
    
    <category term="investment" scheme="http://zt-winter.github.io/categories/investment/"/>
    
    
    <category term="investment" scheme="http://zt-winter.github.io/tags/investment/"/>
    
    <category term="stock" scheme="http://zt-winter.github.io/tags/stock/"/>
    
  </entry>
  
  <entry>
    <title>modsecurity rule grammar</title>
    <link href="http://zt-winter.github.io/2025/04/23/modsecurity-rule/"/>
    <id>http://zt-winter.github.io/2025/04/23/modsecurity-rule/</id>
    <published>2025-04-22T16:00:00.000Z</published>
    <updated>2025-05-19T05:41:26.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="modsecurity规则语法"><a href="#modsecurity规则语法" class="headerlink" title="modsecurity规则语法"></a>modsecurity规则语法</h1><p>modsecurity core rule规则可以参考<a href="https://github.com/owasp-modsecurity/ModSecurity/wiki/Reference-Manual-(v3.x)">官方wiki文档</a><br>SecRule的基本语法<br>SecRule VARIABLES OPERATOR [ACTIONS]</p><ul><li>VARIABLES:一般是指定请求和响应的对象，如REQUEST_BODY、REQUEST_HEADERS、REQUEST_METHOD、REQUEST_URI(包含完整的请求URL,有请求的字符串数据，比如&#x2F;index.php?p&#x3D;x)</li><li>OPERATOR:可以理解为一个操作函数，一个入参是VARIABLES，一个是操作函数后面的入参，@用于标识操作函数，比如<code>SecRule TX:DETECTION_PARANOIA_LEVEL &quot;@lt 1&quot; &quot;id:913011&quot;</code>，lt函数比较VARIABLES与1的值，如果VARIABLES小于1，,则执行action。pmFromFIle函数匹配variables与入参，不区分大小写，入参可以有多个，可以送入文件。<code>SecRule REQUEST_HEADERS:User-Agent &quot;@pmFromFile scanners-user-agents.data scanners-user-agents-1.data&quot; &quot;id:913011&quot;</code>。</li><li>ACTIONS:满足OPERATOR的要求后执行的动作，有多个action时，用逗号隔开，常用的一些aciton如下：<ul><li>“id:xxxx”:对规则进行分类编号</li><li>“allow”:停止规则匹配，允许通信继续执行</li><li>“auditlog”:标记本次通信，并记录audit log</li><li>“block”:阻止通信，但没有语法支持如何阻止通信，具体使用细节参考<a href="https://github.com/owasp-modsecurity/ModSecurity/wiki/Reference-Manual-(v3.x)#user-content-block">block说明</a></li></ul></li></ul><h1 id="coreruleset实例"><a href="#coreruleset实例" class="headerlink" title="coreruleset实例"></a>coreruleset实例</h1><p><a href="https://github.com/coreruleset/coreruleset">coreruleset</a>是modsecurity官方给出的一些规则集，其中有一些针对特定攻击或探测的规则，可供参考。<br>导入corerulest时，其中会有一个crs-setup.conf文件，该文件命令了一个通用变量集，在规则集中会引用这些变量，从而实现所有规则集的变量控制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SecAction \</span><br><span class="line">  &quot;id:900990,\</span><br><span class="line">  phase:1,\</span><br><span class="line">  pass,\</span><br><span class="line">  t:none,\</span><br><span class="line">  nolog,\</span><br><span class="line">  tag:&#x27;OWASP_CRS&#x27;,\</span><br><span class="line">  ver:&#x27;OWASP_CRS/4.14.0-dev&#x27;,\</span><br><span class="line">  setvar:tx.crs_setup_version=4140,\</span><br><span class="line">  setvar:tx.detection_paranoia_level=1&quot;</span><br></pre></td></tr></table></figure><p>setvar:XXX就设置了变量，后续在coreruleset识别扫描的规则集中会获取该变量，并做出不同的探测级别设置，比如REQUEST-913-SCANNER-DETECTION.conf中<code>SecRule TX:DETECTION_PARANOIA_LEVEL &quot;@lt 1&quot; &quot;id:913011&quot;</code>，会判断TX:DETECTION_PARANOIA_LEVEL是否小于1。在crs-setup.conf文件中会对通用变量的含义有详细解释。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;modsecurity规则语法&quot;&gt;&lt;a href=&quot;#modsecurity规则语法&quot; class=&quot;headerlink&quot; title=&quot;modsecurity规则语法&quot;&gt;&lt;/a&gt;modsecurity规则语法&lt;/h1&gt;&lt;p&gt;modsecurity core r</summary>
      
    
    
    
    <category term="security" scheme="http://zt-winter.github.io/categories/security/"/>
    
    
    <category term="modsecurity" scheme="http://zt-winter.github.io/tags/modsecurity/"/>
    
    <category term="WAF" scheme="http://zt-winter.github.io/tags/WAF/"/>
    
  </entry>
  
  <entry>
    <title>pacman常用命令</title>
    <link href="http://zt-winter.github.io/2025/04/17/pacman/"/>
    <id>http://zt-winter.github.io/2025/04/17/pacman/</id>
    <published>2025-04-16T16:00:00.000Z</published>
    <updated>2025-05-19T05:41:26.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pacman常用命令"><a href="#pacman常用命令" class="headerlink" title="pacman常用命令"></a>pacman常用命令</h1><p>pacman -Rc packagename, -c &#x3D; –cascade; 删除该软件以及所有依赖该软件的软件</p><p>pacman -Rs packagename, -s &#x3D; –recursive; 删除该软件，并递归删除该软件的不需要的依赖。在安装该软件时，可能安装一些依赖软件，如果这些依赖软件没有被其他软件依赖，则递归删除。</p><p>pacman -Rsc packagename; 可以删除该软件的上下游依赖关系</p><p>pacman -S –overwrite \* packagename; 覆盖性强制安装软件，当错误删除&#x2F;var&#x2F;lib&#x2F;pacman后，导致pacman无法识别已安装的软件，可以用–overwrite \*进行强制覆盖，之后pacman会识别到重新安装的软件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pacman常用命令&quot;&gt;&lt;a href=&quot;#pacman常用命令&quot; class=&quot;headerlink&quot; title=&quot;pacman常用命令&quot;&gt;&lt;/a&gt;pacman常用命令&lt;/h1&gt;&lt;p&gt;pacman -Rc packagename, -c &amp;#x3D; –cas</summary>
      
    
    
    
    <category term="pacman" scheme="http://zt-winter.github.io/categories/pacman/"/>
    
    
    <category term="pacman" scheme="http://zt-winter.github.io/tags/pacman/"/>
    
  </entry>
  
  <entry>
    <title>证券分析阅读笔记</title>
    <link href="http://zt-winter.github.io/2025/03/25/security-analysis/"/>
    <id>http://zt-winter.github.io/2025/03/25/security-analysis/</id>
    <published>2025-03-24T16:00:00.000Z</published>
    <updated>2025-05-19T05:41:26.969Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f67dcb7e7f52cf5f559727e8efda333b616f62408425bd2cd3276d011d31daa5">23aeb3008bb770d90784d19252d56dd209bd924e00f05086652f923dd7ca20d6efc598e5a2edfc1b8d62a1557aa9f7c648001d3109447629b2afa90a418e658989c8614dc8fe404ea51d3378d4c5e0c16f7e4a523bbecb0f0aaa2e045da52bef7a505df5c98570a5837b668a2a0dcd15bc17fa79a820bc64f6b115b595ea10cf4d006cab665fa5495730805a9d0dddadc46ac1e4ffe310eebf7b845262626f5d842389eb4a6c28fca9616bc61e9ee852c535fe65121b4b58f97929061c67def1</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="readnote" scheme="http://zt-winter.github.io/categories/readnote/"/>
    
    
    <category term="investment" scheme="http://zt-winter.github.io/tags/investment/"/>
    
    <category term="readnote" scheme="http://zt-winter.github.io/tags/readnote/"/>
    
  </entry>
  
  <entry>
    <title>天气预报</title>
    <link href="http://zt-winter.github.io/2023/07/25/%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/"/>
    <id>http://zt-winter.github.io/2023/07/25/%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/</id>
    <published>2023-07-24T16:00:00.000Z</published>
    <updated>2025-05-19T05:41:26.969Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="38429995fbfb043453c9f4ffca225ff2fd1a349ad92866bc732fdd15c5fa1443">23aeb3008bb770d90784d19252d56dd209bd924e00f05086652f923dd7ca20d6fd604035b738e4cd0e0f815d9db4f89f7a5f5bac1fd7b862c224f17e16dab59afe69875852c103d49997679a71df60ef8729e6a3b48dbddc761f4d1edb231939b595f42e32b28a7db0c82ceb3e7c2a070705ec525a49731e28e19b81519dc92d7f11d8fa491f6694350c397ba0a9e5193a6382537ac9e51b26411958f5922d72b27b909f4d3569cbaff5d71aee756d7ba146e2895704edd5e764167237575d2800f23830fe19cd8d1d819a636ec4d66cd22014904e0c576923b63d5bc6adf7037d3882a4a425df51d0cdf3aec998438f852df5454683442f350e245a320481ad4b8c041bbf89a1906f1b2ab51514b7f790a034ac5f330cc3d2ed4c9a9e030f18b62a0f2d66b6c9615cee64224231e8d5a171c693e18f7153fc302430750115e41845dc553379b610a8e82ba70479bc6834275fb12d873a20a02602350784fdfad6d271a9697dfe21dce49302628a31d3bd2ceaf9f8d557a3123c71a30f3d8b8f487eca76c1e0d029ba99b4f8ab9a76b09901ca32829d23d97e566a0dc177be2ff798e50392c1a35eb638578b66dce0b05c8f74b364e75e5fd6a35910a2de27d5cf2be798ebc6245eeb3d7d33bf34af04b880de6c88ec4cc19df1f1417edfa682c280cf21a33cad2c9e9143430f840f0bde21cefe603bd30521e46e19e2e04f6efc9230ac17d6cae87f394f56f531a81e46ecacfe112a1e1bdc869414f3e6c9463eefe722b3869ec93e3da98042c028ab804d6720a9498f3aa8eda4c729a7e6570e5fdc15c92b016cf546d888cfd8f7c19728919b435657246b52e9b4d01f9857c5e9e5265a46e14234523379ef6827903d1754a2116ba01f2d55c0298044dd9cd0de1b90537fe724b8e0be8b1c6e77f9e4d37e76e2a8b2a9b309d500fc1143fecfec6e71299375a9f8f0dc8109f4e752ce41e75941ad4a31c9f24510308c6887f0196c7fd5de402d3a5bb123af808ef0aecd119d12cdd390908a18ed21d52decac71a65daa03660861fbed0f8253c8180f7919f645e83d31987ae02b85d615660b7169b9d9c5fa80687be7114d46a6a5b4278d970578843d78d9c939754b265b7ee418e538e25aec2a37d3ae6dd1b49c776c49e840a76180a34cdaa04914b85853d0fbbc63227534c8cf0a27512db79feda83efb954e31cf01bb50fb018fc43fe6903db7aa209a818225dec950cb0bde3410949a54d7ed54000339ecb04594b3c48c70d5c5b407add144702cbb586990bb5d78cfc394f7f6cb1b6adcba06837e354650de2a9ef5c469f26da7bbbfb26b88f2901c590f79fd22bc02d23421dfa387caa29faac58cd4a21b089f6ecf1adfaa157fa27cf6ff5bd2be27afa0541bbed8a739a9a79e7bb6aa12082b914fb489e1dcacb40eb603ce71f231acbb0e8deb0f20b16d63252933be0e1d1a33b94262092049a57ae4495d4d480fafd623cf037c5d96257c9ccbf6faec313543ffa4667b20c32e7459001c4f80e22d1ef39a63c86e9691c313b04c9ba0c46082ec202f48469eaabdbb70346f4bb998355a7a9168127d639cd37944dc2e685967be00c2f96253c08f3264c72d19e000a93668d5b3c9c3bdb0c1f7e1ebbaa7baa66609a64f8f6af8a6d8cfea0f3792f3df8d3be55ed110815124c62154cbbce3d8d97888058cd8c674ac70c69504bbf7fb87306ce6f151eb1599bc96c0fa8aff375d47725eaa0f9403673439bdb299eb57d1110dd42dd5cbc512e5bbeeb51526c2ac5b26f0fcf06e1cfd525c7611941e280578d927504393d69096b7def4b900fd5e43d71bc12b4a8a9e115d211ceceb815074666bd6130c6ade94abe19fc50d98b2679bebb16ca6971225bf78ba05acf2225750254dbff84a209ccbe71f689c7ed36db30c7954984cdc1d81da254493c8ccd1e8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="生活" scheme="http://zt-winter.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="http://zt-winter.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="天气" scheme="http://zt-winter.github.io/tags/%E5%A4%A9%E6%B0%94/"/>
    
  </entry>
  
  <entry>
    <title>golang中的零值、nil与空值</title>
    <link href="http://zt-winter.github.io/2023/04/10/%E9%9B%B6%E5%80%BCnil%E7%A9%BA%E5%80%BC/"/>
    <id>http://zt-winter.github.io/2023/04/10/%E9%9B%B6%E5%80%BCnil%E7%A9%BA%E5%80%BC/</id>
    <published>2023-04-09T16:00:00.000Z</published>
    <updated>2025-05-19T05:41:26.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="零值"><a href="#零值" class="headerlink" title="零值"></a>零值</h1><p>零值是指声明变量（分配内存时）并未显示初始化时，编译器为你的变量自动设置一个默认初始值。<a href="https://go.dev/ref/spec#The_zero_value">零值官方说明</a><br>零值默认初始值可以分为两大类：</p><ul><li>值类型：int默认值为0，bool默认值为false，float64的默认值为0.000000，byte默认值为0，string默认值是“”,对于数组和结构体，会递归初始化其元素或者字段，取决于其类型。</li><li>引用类型：均为nil，包括指针pointer，函数func，接口interface，切片slice，管道channel，哈希表map。<br>注意<code>testNum := 0</code>已经完成了初始化，不属于零值。</li></ul><h1 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h1><p>最初接触nil，是错误处理时，通过返回的error是否为nil判断是否出现错误。nil是go中预先声明的标识符，主要用来表示引用类型的零值，表示它们未被初始化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\\nil经典问题</span><br><span class="line">var p *int</span><br><span class="line">var i interface&#123;&#125;</span><br><span class="line">var p1 *[3]int</span><br><span class="line"></span><br><span class="line">fmt.Println(p1 == p) \\编译不通过，因为类型不一致</span><br><span class="line">fmt.Println(i == p) \\返回结果为True</span><br></pre></td></tr></table></figure><p>上述结果的原因在于，interface是没有类型，其他变量声明时已经指定了类型。一般不同类型的数据不能直接比较。有些比较是go内部进行了类型转换，然后比较。而interface可以接受任意类型，因此在interface比较时会比较类型与值两个部分。p与i值都是nil，但是类型不一致。<br>在判断<code>p1==p</code>时，编辑器会直接提示类型不一致，不能比较。</p><p>#空结构<br>空结构是没有任何字段的结构类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type sample struct&#123;&#125;</span><br></pre></td></tr></table></figure><p>一个结构体示例的大小由其字段的宽度与对齐标准决定。空结构占用零字节，也不用填充对齐。空结构数组或者切片也不占用空间。常见的两个用途：</p><ul><li>chan strcut{}代替chan bool传递信号，此时我们不关注传递的值，只关注传递的动作是否发生。</li><li>防止unkeyed初始化结构<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type sample &#123;</span><br><span class="line"> x int</span><br><span class="line"> y int</span><br><span class="line"> _ struct&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>此时赋值sample{x:1,y:1}，但sample{1,1}出现错误。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;零值&quot;&gt;&lt;a href=&quot;#零值&quot; class=&quot;headerlink&quot; title=&quot;零值&quot;&gt;&lt;/a&gt;零值&lt;/h1&gt;&lt;p&gt;零值是指声明变量（分配内存时）并未显示初始化时，编译器为你的变量自动设置一个默认初始值。&lt;a href=&quot;https://go.dev/re</summary>
      
    
    
    
    <category term="go" scheme="http://zt-winter.github.io/categories/go/"/>
    
    
    <category term="golang" scheme="http://zt-winter.github.io/tags/golang/"/>
    
    <category term="nil" scheme="http://zt-winter.github.io/tags/nil/"/>
    
    <category term="zero value" scheme="http://zt-winter.github.io/tags/zero-value/"/>
    
  </entry>
  
  <entry>
    <title>ssh配置</title>
    <link href="http://zt-winter.github.io/2023/02/05/ssh/"/>
    <id>http://zt-winter.github.io/2023/02/05/ssh/</id>
    <published>2023-02-04T16:00:00.000Z</published>
    <updated>2025-05-19T05:41:26.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ssh配置与相关错误解决"><a href="#ssh配置与相关错误解决" class="headerlink" title="ssh配置与相关错误解决"></a>ssh配置与相关错误解决</h1><ol><li><p>错误信息:<code>git@github.com: Permission denied (publickey,password,keyboard-interactive)</code><br>环境:linux,在一个星期前,原本github配置还能够使用,突然需要输入密码,且在输入密码后依然无法连接<br>原因:连接github无法找到对应的密钥<br>排查过程:使用<code>ssh -Tv git@github.com</code>报错依然是该信息,重新生成密钥后再次添加到github.com的ssh公钥管理中,依然报错.怀疑是ssh配置出现问题,查看~&#x2F;.ssh&#x2F;config文件,相关信息如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/github</span><br></pre></td></tr></table></figure><p>解决方法:在stackoverflow中找到解决方法,将github.com(HostName)改为ssh.github.com. 尝试后解决.怀疑github关于https与ssh两种连接方式更新后,ssh需要单独指向ssh.github.com</p></li><li><p>错误信息:<code>git@github.com: Permission denied (publickey,password,keyboard-interactive)</code><br>环境:windows,第一次配置github,无法使用.<br>原因:连接github无法找到对应的密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host github</span><br><span class="line">HostName ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>解决方法:将github(Host)改为github.com.问题在于对于一般的ssh远程连接,Host就是一个昵称,在命令行<code>ssh xxx</code>使用,但在github的连接中,应该使用github.com,否则ssh无法找到对应的配置.</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ssh配置与相关错误解决&quot;&gt;&lt;a href=&quot;#ssh配置与相关错误解决&quot; class=&quot;headerlink&quot; title=&quot;ssh配置与相关错误解决&quot;&gt;&lt;/a&gt;ssh配置与相关错误解决&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;错误信息:&lt;code&gt;git@github</summary>
      
    
    
    
    <category term="ssh" scheme="http://zt-winter.github.io/categories/ssh/"/>
    
    
    <category term="linux" scheme="http://zt-winter.github.io/tags/linux/"/>
    
    <category term="ssh" scheme="http://zt-winter.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>error处理</title>
    <link href="http://zt-winter.github.io/2022/09/20/error/"/>
    <id>http://zt-winter.github.io/2022/09/20/error/</id>
    <published>2022-09-19T16:00:00.000Z</published>
    <updated>2025-05-19T05:41:26.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="error处理机制"><a href="#error处理机制" class="headerlink" title="error处理机制"></a>error处理机制</h1><ul><li>用golang写网络流量处理代码时，因为网络协议很多内容字段解析依靠前面的规定的长度，而应用层的具体协议在传输层不会指出，因此依靠一些简单字段判断协议会将协议识别错误，导致slice越界。因此在每次读取字符流都要做错误判断，同时gopacket大量协议解析函数返回值都存在error，都需要做错误判断。在写的时候觉得非常麻烦。觉得try{}catch{}的处理方式可能更好。</li><li>最近维护的一个java的代码，在上线测试出现问题，排查问题时代码在最上层使用try catch，所有的错误都在最上层的几个函数抛出，导致需要自己在各处下判断，需找错误。</li><li>try catch这种错误处理模式，就是直接将所有错误全部甩出，导致后期维护困难，而每个错误做具体处理导致前期开发困难，各有优劣。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;error处理机制&quot;&gt;&lt;a href=&quot;#error处理机制&quot; class=&quot;headerlink&quot; title=&quot;error处理机制&quot;&gt;&lt;/a&gt;error处理机制&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;用golang写网络流量处理代码时，因为网络协议很多内容字段解析依靠前面</summary>
      
    
    
    
    <category term="go, java" scheme="http://zt-winter.github.io/categories/go-java/"/>
    
    
    <category term="error" scheme="http://zt-winter.github.io/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>闭包</title>
    <link href="http://zt-winter.github.io/2022/07/21/%E9%97%AD%E5%8C%85/"/>
    <id>http://zt-winter.github.io/2022/07/21/%E9%97%AD%E5%8C%85/</id>
    <published>2022-07-20T16:00:00.000Z</published>
    <updated>2025-05-19T05:41:26.969Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/56750616">相关参考文章</a><br>这篇文章说的很详细，可以自己动手从汇编的角度看看底层实现</p><h1 id="闭包的定义"><a href="#闭包的定义" class="headerlink" title="闭包的定义"></a>闭包的定义</h1><p>闭包 是由函数及其相关引用环境组合而成的实体(即：闭包&#x3D;函数+引用环境)。<br>“官方”的解释是：所谓“闭包”，指的是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chain</span><span class="params">(a <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s&quot;</span>, a)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chain2</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;test2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fib函数的返回值是一个函数func() int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">a, b := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">a, b = b, a + b</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f := chain</span><br><span class="line">fmt.Println(reflect.TypeOf(f))</span><br><span class="line">fmt.Println(f(<span class="string">&quot;sadf&quot;</span>))</span><br><span class="line">f2 := chain2</span><br><span class="line">f2()</span><br><span class="line">f3 := fib</span><br><span class="line">fmt.Println(<span class="string">&quot;func fib() func() int&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;fib type is %s\n&quot;</span>, reflect.TypeOf(f3))</span><br><span class="line">fmt.Println(f3(), f3(), f3(), f3(), f3())</span><br><span class="line">f4 := fib()</span><br><span class="line">fmt.Printf(<span class="string">&quot;fib() type is %s\n&quot;</span>, reflect.TypeOf(f4))</span><br><span class="line">fmt.Println(f4(), f4(), f4(), f4(), f4())</span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./code/go/test/test</span></span><br><span class="line">func(string) int</span><br><span class="line">sadf0</span><br><span class="line">test2</span><br><span class="line">func fib() func() int</span><br><span class="line">fib type is func() func() int</span><br><span class="line">0x480760 0x480740 0x480720 0x480700 0x4806e0</span><br><span class="line">fib() type is func() int</span><br><span class="line">1 1 2 3 5</span><br></pre></td></tr></table></figure><p>合理使用闭包函数，可以减少参数传递和代码量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//leetcode 76题</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minWindow</span><span class="params">(s <span class="type">string</span>, t <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    ori, cnt := <span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>&#123;&#125;, <span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(t); i++ &#123;</span><br><span class="line">        ori[t[i]]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sLen := <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="built_in">len</span> := math.MaxInt32</span><br><span class="line">    ansL, ansR := <span class="number">-1</span>, <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    check := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> k, v := <span class="keyword">range</span> ori &#123;</span><br><span class="line">            <span class="keyword">if</span> cnt[k] &lt; v &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> l, r := <span class="number">0</span>, <span class="number">0</span>; r &lt; sLen; r++ &#123;</span><br><span class="line">        <span class="keyword">if</span> r &lt; sLen &amp;&amp; ori[s[r]] &gt; <span class="number">0</span> &#123;</span><br><span class="line">            cnt[s[r]]++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> check() &amp;&amp; l &lt;= r &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l + <span class="number">1</span> &lt; <span class="built_in">len</span>) &#123;</span><br><span class="line">                <span class="built_in">len</span> = r - l + <span class="number">1</span></span><br><span class="line">                ansL, ansR = l, l + <span class="built_in">len</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> _, ok := ori[s[l]]; ok &#123;</span><br><span class="line">                cnt[s[l]] -= <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            l++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ansL == <span class="number">-1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s[ansL:ansR]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/56750616&quot;&gt;相关参考文章&lt;/a&gt;&lt;br&gt;这篇文章说的很详细，可以自己动手从汇编的角度看看底层实现&lt;/p&gt;
&lt;h1 id=&quot;闭包的定义&quot;&gt;&lt;a href=&quot;#闭包的定义&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="go" scheme="http://zt-winter.github.io/categories/go/"/>
    
    
    <category term="闭包" scheme="http://zt-winter.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>单调栈</title>
    <link href="http://zt-winter.github.io/2022/07/15/monotonic_stack/"/>
    <id>http://zt-winter.github.io/2022/07/15/monotonic_stack/</id>
    <published>2022-07-14T16:00:00.000Z</published>
    <updated>2025-05-19T05:41:26.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><p>leetcode 84题</p><p>给定n个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为1。</p><p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p><p>​要求最大面积，不管最后的面积如何，都肯定包括一个完整的柱子。所以我们找最大面积，可以将所有柱子作为那个完整的柱子，也就是最大面积的高度被我们确定。然后向两边扩展，然后比较所有这些扩展的面积大小。选择柱子 j 作为最高的完整柱子，如果向左扩展，那么要求 i &lt; j ，同时heights[i] &gt; heights[j]。然后是边界如何重复利用的问题。 x &lt; y &lt; z ，当我们知道 y 的边界是 x 后，能否能过比较 y 和 z 来判断 z 的边界。对于任意的 i ， x &lt; i &lt; y ，可以说 heights[i] &gt; heights[y] ，如果 heights[y] &gt; heights[z] ，所有的 heights[i] &gt; heights[z] ，所以 z 的边界可以从 x 开始推。这种数据进出模式类似栈。所以可以尝试用栈试试。</p><p>​例子 [6,7,5,2,4,5,9,3] ：</p><p> 6 进栈，栈开始为空，无出栈，栈长为1，6的边界height数组第一个数。</p><p>7 进栈， 7 &gt; 6 ，无出栈，栈长为2，7的边界为height数组的第二个数。</p><p>5 进栈，5 比 6、7小，所以6 、7 出栈，栈长为1，5的边界为height数组的第一个数。</p><p>2 进栈，2 &lt; 5，所以5出栈，栈长为1，2的边界为height数组的第一个数。</p><p>依次类推。由于数组索引第一个为0，所以可以将所以数字减一。</p><p>同理可以得到柱子的右边界。</p><p>使用一个栈和两个数组，可以保存数组中任意元素的左右边界。然后比较求值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">largestRectangleArea</span><span class="params">(heights []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(heights)</span><br><span class="line">    left, right := <span class="built_in">make</span>([]<span class="type">int</span>, n), <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        right[i] = n</span><br><span class="line">    &#125;</span><br><span class="line">    mono_stack := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">len</span>(mono_stack) &gt; <span class="number">0</span> &amp;&amp; heights[mono_stack[<span class="built_in">len</span>(mono_stack)<span class="number">-1</span>]] &gt;= heights[i] &#123;</span><br><span class="line">            right[mono_stack[<span class="built_in">len</span>(mono_stack)<span class="number">-1</span>]] = i</span><br><span class="line">            mono_stack = mono_stack[:<span class="built_in">len</span>(mono_stack)<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(mono_stack) == <span class="number">0</span> &#123;</span><br><span class="line">            left[i] = <span class="number">-1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left[i] = mono_stack[<span class="built_in">len</span>(mono_stack)<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        mono_stack = <span class="built_in">append</span>(mono_stack, i)</span><br><span class="line">    &#125;</span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        ans = max(ans, (right[i] - left[i] - <span class="number">1</span>) * heights[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单调栈&quot;&gt;&lt;a href=&quot;#单调栈&quot; class=&quot;headerlink&quot; title=&quot;单调栈&quot;&gt;&lt;/a&gt;单调栈&lt;/h1&gt;&lt;p&gt;leetcode 84题&lt;/p&gt;
&lt;p&gt;给定n个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为1。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="algorithm" scheme="http://zt-winter.github.io/categories/algorithm/"/>
    
    
    <category term="monotonic_stack" scheme="http://zt-winter.github.io/tags/monotonic-stack/"/>
    
  </entry>
  
  <entry>
    <title>f2fs文件目录存储结构</title>
    <link href="http://zt-winter.github.io/2022/07/13/f2fs%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%AD%98%E5%82%A8%E8%AF%B4%E6%98%8E/"/>
    <id>http://zt-winter.github.io/2022/07/13/f2fs%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%AD%98%E5%82%A8%E8%AF%B4%E6%98%8E/</id>
    <published>2022-07-12T16:00:00.000Z</published>
    <updated>2025-05-19T05:41:26.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="f2f2文件目录存储结构"><a href="#f2f2文件目录存储结构" class="headerlink" title="f2f2文件目录存储结构"></a>f2f2文件目录存储结构</h1><p>当前目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ tree mnt/f2fs</span><br><span class="line">mnt/f2fs</span><br><span class="line">├── dir</span><br><span class="line">│   ├── 6.29.cfx.pcap</span><br><span class="line">│   └── testone</span><br><span class="line">└── test</span><br><span class="line"></span><br><span class="line">1 directory, 3 files</span><br></pre></td></tr></table></figure><p>文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mnt/f2fs/test:</span><br><span class="line">hello world</span><br><span class="line">mnt/f2fs/dir/testone</span><br><span class="line">hellow zt</span><br><span class="line">mnt/f2fs/dir/6.29.cfx.pcap 一个27MB的数据包文件</span><br></pre></td></tr></table></figure><h3 id="NAT信息"><a href="#NAT信息" class="headerlink" title="NAT信息"></a>NAT信息</h3><p>查看inode信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dump.f2fs -n 0~-1 /dev/loop0</span><br><span class="line">$ nvim dump_nat</span><br><span class="line">  1 nid:    3   ino:    3   offset:    0    blkaddr:      4101  pack:2</span><br><span class="line">  2 nid:    4   ino:    4   offset:    0    blkaddr:      4105  pack:2</span><br><span class="line">  3 nid:    5   ino:    5   offset:    0    blkaddr:      4609  pack:2</span><br><span class="line">  4 nid:    6   ino:    6   offset:    0    blkaddr:      4610  pack:2</span><br><span class="line">  5 nid:    7   ino:    7   offset:    0    blkaddr:      4611  pack:2</span><br><span class="line">  6 nid:    8   ino:    7   offset:    1    blkaddr:      4612  pack:2</span><br><span class="line">  7 nid:    9   ino:    7   offset:    2    blkaddr:      4613  pack:2</span><br><span class="line">  8 nid:   10   ino:    7   offset:    3    blkaddr:      5120  pack:2</span><br><span class="line">  9 nid:   11   ino:    7   offset:    4    blkaddr:      4614  pack:2</span><br><span class="line"> 10 nid:   12   ino:    7   offset:    5    blkaddr:      4615  pack:2</span><br><span class="line"> 11 nid:   13   ino:    7   offset:    6    blkaddr:      4616  pack:2</span><br><span class="line"> 12 nid:   14   ino:    7   offset:    7    blkaddr:      4617  pack:2</span><br><span class="line"> 13 nid:   15   ino:    7   offset:    8    blkaddr:      4618  pack:2</span><br><span class="line"> 14 nid:   16   ino:    7   offset:    9    blkaddr:      4619  pack:2</span><br></pre></td></tr></table></figure><p>从super block中可以得到信息，NAT的地址0xa00000，CP中的NAT journal地址在0x201000<br>00000400  10 20 f5 f2 01 00 0f 00  09 00 00 00 03 00 00 00  |. …………..|<br>00000410  0c 00 00 00 09 00 00 00  01 00 00 00 01 00 00 00  |…………….|<br>00000420  00 00 00 00 00 64 00 00  00 00 00 00 2a 00 00 00  |…..d……<em>…|<br>00000430  31 00 00 00 02 00 00 00  02 00 00 00 02 00 00 00  |1……………|<br>00000440  01 00 00 00 2a 00 00 00  00 02 00 00 00 02 00 00  |….</em>………..|<br>00000450  00 06 00 00 <font color=red><strong>00 0a 00 00</strong></font>  00 0e 00 00 00 10 00 00  |…………….|<br>00000460  03 00 00 00 01 00 00 00  02 00 00 00 83 8f 92 2c  |……………,|<br>00000470  60 18 4d 2e 85 c3 d4 8e  56 29 d9 dc 00 00 00 00  |&#96;.M…..V)……|<br>00000480  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |…………….|</p><p>查看NAT，红色是node的序号，蓝色是node的地址，绿色是版本号，接下来是下一个节点。</p><p>在这里3号node是根目录，4号node是dir目录，5号node是test文件，6号文件是testone，7号文件是6.29.cap</p><p>00a00000  00 00 00 00 00 00 00 00  00 00 01 00 00 00 01 00  |…………….|<br>00a00010  00 00 00 02 00 00 00 01  00 00 00 <font color=green><strong>00</strong></font> <font color=red><strong>03 00 00 00</strong></font>  |…………….|<br>00a00020  <font color=blue><strong>05 10 00 00</strong></font> 00 04 00 00  00 08 10 00 00 00 05 00  |…………….|<br>00a00030  00 00 01 12 00 00 00 06  00 00 00 02 12 00 00 00  |…………….|<br>00a00040  07 00 00 00 03 12 00 00  00 07 00 00 00 04 12 00  |…………….|<br>00a00050  00 00 07 00 00 00 05 12  00 00 00 07 00 00 00 00  |…………….|<br>00a00060  14 00 00 00 07 00 00 00  06 12 00 00 00 07 00 00  |…………….|<br>00a00070  00 07 12 00 00 00 07 00  00 00 08 12 00 00 00 07  |…………….|<br>00a00080  00 00 00 09 12 00 00 00  07 00 00 00 0a 12 00 00  |…………….|<br>00a00090  00 07 00 00 00 0b 12 00  00 00 00 00 00 00 00 00  |…………….|<br>00a000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |…………….|</p><ul><li><strong>当文件系统修改比较小时，会将修改数据保存在nat journal中，而不直接写入到SIT和NAT中，减少读写次数。</strong></li></ul><h3 id="node-inode-文件存储"><a href="#node-inode-文件存储" class="headerlink" title="node   inode  文件存储"></a>node   inode  文件存储</h3><p>从下图的f2fs_node数据结构可以看出，f2fs_node分为三种inode、direct_node、indirect。第一种，node存储指向data的指针；第二种，direct_node存储指向node的指针，然后再由node存储指向data的指针</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1081 struct f2fs_node &#123;</span><br><span class="line">1082     /* can be one of three types: inode, direct, and indirect types */</span><br><span class="line">1083     union &#123;</span><br><span class="line">1084         struct f2fs_inode i;</span><br><span class="line">1085         struct direct_node dn;</span><br><span class="line">1086         struct indirect_node in;</span><br><span class="line">1087     &#125;;</span><br><span class="line">1088     struct node_footer footer;</span><br><span class="line">1089 &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> 994 struct f2fs_inode &#123;</span><br><span class="line"> 995     __le16 i_mode;          /* file mode */</span><br><span class="line"> 996     __u8 i_advise;          /* file hints */</span><br><span class="line"> 997     __u8 i_inline;          /* file inline flags */</span><br><span class="line"> 998     __le32 i_uid;           /* user ID */</span><br><span class="line"> 999     __le32 i_gid;           /* group ID */</span><br><span class="line">1000     __le32 i_links;         /* links count */</span><br><span class="line">1001     __le64 i_size;          /* file size in bytes */</span><br><span class="line">1002     __le64 i_blocks;        /* file size in blocks */</span><br><span class="line">1003     __le64 i_atime;         /* access time */</span><br><span class="line">1004     __le64 i_ctime;         /* change time */</span><br><span class="line">1005     __le64 i_mtime;         /* modification time */</span><br><span class="line">1006     __le32 i_atime_nsec;        /* access time in nano scale */</span><br><span class="line">1007     __le32 i_ctime_nsec;        /* change time in nano scale */</span><br><span class="line">1008     __le32 i_mtime_nsec;        /* modification time in nano scale */</span><br><span class="line">1009     __le32 i_generation;        /* file version (for NFS) */</span><br><span class="line">1010     union &#123;</span><br><span class="line">1011         __le32 i_current_depth; /* only for directory depth */</span><br><span class="line">1012         __le16 i_gc_failures;   /*</span><br><span class="line">1013                      * # of gc failures on pinned file.</span><br><span class="line">1014                      * only for regular files.</span><br><span class="line">1015                      */</span><br><span class="line">1016     &#125;;</span><br><span class="line">1017     __le32 i_xattr_nid;     /* nid to save xattr */</span><br><span class="line">1018     __le32 i_flags;         /* file attributes */</span><br><span class="line">1019     __le32 i_pino;          /* parent inode number */</span><br><span class="line">1020     __le32 i_namelen;       /* file name length */</span><br><span class="line">1021     __u8 i_name[F2FS_NAME_LEN]; /* file name for SPOR */</span><br><span class="line">1022     __u8 i_dir_level;       /* dentry_level for large dir */</span><br><span class="line">1023</span><br><span class="line">1024     struct f2fs_extent i_ext __attribute__((packed));   /* caching a largest extent */</span><br><span class="line">1025</span><br><span class="line">1026     union &#123;</span><br><span class="line">1027         struct &#123;</span><br><span class="line">1028             __le16 i_extra_isize;   /* extra inode attribute size */</span><br><span class="line">1029             __le16 i_inline_xattr_size; /* inline xattr size, unit: 4 bytes */</span><br><span class="line">1030             __le32 i_projid;    /* project id */</span><br><span class="line">1031             __le32 i_inode_checksum;/* inode meta checksum */</span><br><span class="line">1032             __le64 i_crtime;    /* creation time */</span><br><span class="line">1033             __le32 i_crtime_nsec;   /* creation time in nano scale */</span><br><span class="line">1034             __le64 i_compr_blocks;  /* # of compressed blocks */</span><br><span class="line">1035             __u8 i_compress_algrithm;   /* compress algrithm */</span><br><span class="line">1036             __u8 i_log_cluster_size;    /* log of cluster size */</span><br><span class="line">1037             __le16 i_padding;       /* padding */</span><br><span class="line">1038             __le32 i_extra_end[0];  /* for attribute size calculation */</span><br><span class="line">1039         &#125; __attribute__((packed));</span><br><span class="line">1040         __le32 i_addr[DEF_ADDRS_PER_INODE]; /* Pointers to data blocks */</span><br><span class="line">1041     &#125;;</span><br><span class="line">1042     __le32 i_nid[5];        /* direct(2), indirect(2),</span><br><span class="line">1043                         double_indirect(1) node id */</span><br><span class="line">1044 &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1071 struct node_footer &#123;</span><br><span class="line">1072     __le32 nid;     /* node id */</span><br><span class="line">1073     __le32 ino;     /* inode nunmber */</span><br><span class="line">1074     __le32 flag;        /* include cold/fsync/dentry marks and offset */</span><br><span class="line">1075     __le64 cp_ver __attribute__((packed));      /* checkpoint version */</span><br><span class="line">1076     __le32 next_blkaddr;    /* next node page block address */</span><br><span class="line">1077 &#125;;</span><br></pre></td></tr></table></figure><p>红色部分对应inode的i_name[F2FS_NAME_LEN]和i_dir_level，占256字节；蓝色部分对应inode的f2fs_extent i_ext，占12个字节。黑色部分对应inode的__len32  i_addr[DEF_ADDRS_PER_INODE]的部分。</p><p>__attribute__((paecked)) : 表示编译时不按照内存对齐的方式，以节约内存</p><p>0120c000  a4 81 00 01 00 00 00 00  00 00 00 00 01 00 00 00  |…………….|<br>0120c010  06 28 18 02 00 00 00 00  8d 21 00 00 00 00 00 00  |.(…….!……|<br>0120c020  06 48 c4 62 00 00 00 00  86 32 c4 62 00 00 00 00  |.H.b…..2.b….|<br>0120c030  86 32 c4 62 00 00 00 00  cc 71 67 0c 33 04 62 2c  |.2.b…..qg.3.b,|<br>0120c040  33 04 62 2c 9c 01 92 e4  00 00 00 00 00 00 00 00  |3.b,…………|<br>0120c050  00 00 00 00 04 00 00 00  0d 00 00 00 <font color=red>36 2e 32 39</font>  |…………6.29|<br>0120c060  <font color=red>2e 63 66 78 2e 70 63 61  70 00 00 00 00 00 00 00</font>  |.cfx.pcap…….|<br>0120c070  <font color=red>00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00</font>  |…………….|<br>*<br>0120c150  <font color=red>00 00 00 00 00 00 00 00  00 00 00 00</font> <font color=blue>00 0c 00 00</font>  |…………….|<br>0120c160  <font color=blue>00 24 00 00 00 14 00 00</font>  <strong>00 38 00 00 01 38 00 00</strong>  |.$…….8…8..|<br>0120c170  <strong>02 38 00 00 03 38 00 00  04 38 00 00 05 38 00 00</strong>  |.8…8…8…8..|<br>0120c180  <strong>06 38 00 00 07 38 00 00  08 38 00 00 09 38 00 00</strong>  |.8…8…8…8..|<br>0120c190  0a 38 00 00 0b 38 00 00  0c 38 00 00 0d 38 00 00  |.8…8…8…8..|<br>0120c1a0  0e 38 00 00 0f 38 00 00  10 38 00 00 11 38 00 00  |.8…8…8…8..|<br>0120c1b0  12 38 00 00 13 38 00 00  14 38 00 00 15 38 00 00  |.8…8…8…8..|<br>0120c1c0  16 38 00 00 17 38 00 00  18 38 00 00 19 38 00 00  |.8…8…8…8..|<br>0120c1d0  1a 38 00 00 1b 38 00 00  1c 38 00 00 1d 38 00 00  |.8…8…8…8..|<br>0120c1e0  1e 38 00 00 1f 38 00 00  20 38 00 00 21 38 00 00  |.8…8.. 8..!8..|<br>0120c1f0  22 38 00 00 23 38 00 00  24 38 00 00 25 38 00 00  |”8..#8..$8..%8..|<br>0120c200  26 38 00 00 27 38 00 00  28 38 00 00 29 38 00 00  |&amp;8..’8..(8..)8..|</p><p>可以看一看0x3801000的内存，是6.29.cfx.pcap的文件数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">03801000  00 01 50 64 2b 95 5d 3d  c0 a8 0c 02 00 00 00 00  |..Pd+.]=........|</span><br><span class="line">03801010  00 00 c0 a8 0c 80 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">03801020  00 00 00 00 00 00 00 00  22 1d bc 62 f5 bf 03 00  |........&quot;..b....|</span><br><span class="line">03801030  3c 00 00 00 3c 00 00 00  ff ff ff ff ff ff 2c 97  |&lt;...&lt;.........,.|</span><br><span class="line">03801040  b1 c3 58 10 99 98 00 01  00 00 00 1d 00 00 00 04  |..X.............|</span><br><span class="line">03801050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">03801070  00 00 00 00 22 1d bc 62  8e 04 04 00 3c 00 00 00  |....&quot;..b....&lt;...|</span><br><span class="line">03801080  3c 00 00 00 ff ff ff ff  ff ff 00 22 46 2c 42 58  |&lt;..........&quot;F,BX|</span><br><span class="line">03801090  08 06 00 01 08 00 06 04  00 01 00 22 46 2c 42 58  |...........&quot;F,BX|</span><br><span class="line">038010a0  c0 a8 0a 59 00 00 00 00  00 00 c0 a8 0a 8a 00 00  |...Y............|</span><br><span class="line">038010b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">038010c0  22 1d bc 62 17 07 04 00  3c 00 00 00 3c 00 00 00  |&quot;..b....&lt;...&lt;...|</span><br><span class="line">038010d0  ff ff ff ff ff ff 50 64  2b 95 5d 3d 08 06 00 01  |......Pd+.]=....|</span><br><span class="line">038010e0  08 00 06 04 00 01 50 64  2b 95 5d 3d c0 a8 0c 02  |......Pd+.]=....|</span><br></pre></td></tr></table></figure><p>可以说，6.29.cfx的文件数据的索引保存在node7 ~ 16中。每一个node的offset  0x16c开始是文件数据的block地址。同时每个node的结尾都标注了该node的inode，都是inode7，同时标注offset，为还原文件做好了工作。</p><h3 id="目录的结构"><a href="#目录的结构" class="headerlink" title="目录的结构"></a>目录的结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1325 /* One directory entry slot representing F2FS_SLOT_LEN-sized file name */</span><br><span class="line">1326 struct f2fs_dir_entry &#123;</span><br><span class="line">1327     __le32 hash_code;   /* hash code of file name */</span><br><span class="line">1328     __le32 ino;     /* inode number */</span><br><span class="line">1329     __le16 name_len;    /* lengh of file name */</span><br><span class="line">1330     __u8 file_type;     /* file type */</span><br><span class="line">1331 &#125; __attribute__((packed));</span><br><span class="line">1332</span><br><span class="line">1333 static_assert(sizeof(struct f2fs_dir_entry) == 11, &quot;&quot;);</span><br><span class="line">1334</span><br><span class="line">1335 /* 4KB-sized directory entry block */</span><br><span class="line">1336 struct f2fs_dentry_block &#123;</span><br><span class="line">1337     /* validity bitmap for directory entries in each block */</span><br><span class="line">1338     /* (214 + 8 - 1) / 8 = 27 */</span><br><span class="line">1339     __u8 dentry_bitmap[SIZE_OF_DENTRY_BITMAP];</span><br><span class="line">1340     /* pagsize - (( size_of_dir_entry + f2fs_slot_len)*nr_entry_in_block + size_of_dir_entry_bitmap) */</span><br><span class="line">1341     /* 4096 - (( 11 + 8) * 214 + 27) = 3 */</span><br><span class="line">1342     __u8 reserved[SIZE_OF_RESERVED];</span><br><span class="line">1343     /* f2fs_dir_entry[214] len(32+32+16+8) */</span><br><span class="line">1344     struct f2fs_dir_entry dentry[NR_DENTRY_IN_BLOCK];</span><br><span class="line">1345     /* filename[214][8] */</span><br><span class="line">1346     __u8 filename[NR_DENTRY_IN_BLOCK][F2FS_SLOT_LEN];</span><br><span class="line">1347 &#125;;</span><br></pre></td></tr></table></figure><p>目前目录对应的nid：</p><ul><li>&#x2F; 根目录对应：nid3，对应的地址0x01005000。在0x01005168开始是data block pointer，指向的地址是0x1602000。红色部分是f2fs_dir_entry的hash_code，蓝色是ino(inode number)，绿色是文件名长度name_len，橘色是file_type。</li></ul><p>01602000  0f 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |…………….|<br>01602010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |…………….|<br>01602020  00 00 03 00 00 00 01 00  02 00 00 00 00 03 00 00  |…………….|<br>01602030  00 02 00 02 <font color=red><strong>2a 8b 40 64</strong></font>  <font color=blue><strong>04 00 00 00</strong></font> <font color=green><strong>03 00</strong></font> <font color=orange><strong>02</strong></font> c9  |....*.@d……..|<br>01602040  7c b4 e4 05 00 00 00 04  00 01 00 00 00 00 00 00  ||……………|<br>01602050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |…………….|<br>*<br>01602950  2e 00 00 00 00 00 00 00  2e 2e 00 00 00 00 00 00  |…………….|<br>01602960  64 69 72 00 00 00 00 00  74 65 73 74 00 00 00 00  |dir…..test….|<br>01602970  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |…………….|</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;f2f2文件目录存储结构&quot;&gt;&lt;a href=&quot;#f2f2文件目录存储结构&quot; class=&quot;headerlink&quot; title=&quot;f2f2文件目录存储结构&quot;&gt;&lt;/a&gt;f2f2文件目录存储结构&lt;/h1&gt;&lt;p&gt;当前目录结构：&lt;/p&gt;
&lt;figure class=&quot;hig</summary>
      
    
    
    
    <category term="f2fs" scheme="http://zt-winter.github.io/categories/f2fs/"/>
    
    
    <category term="f2fs" scheme="http://zt-winter.github.io/tags/f2fs/"/>
    
  </entry>
  
  <entry>
    <title>f2fstool函数说明</title>
    <link href="http://zt-winter.github.io/2022/06/21/f2fstool/"/>
    <id>http://zt-winter.github.io/2022/06/21/f2fstool/</id>
    <published>2022-06-20T16:00:00.000Z</published>
    <updated>2025-05-19T05:41:26.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="f2fs的基本数据结构"><a href="#f2fs的基本数据结构" class="headerlink" title="f2fs的基本数据结构"></a>f2fs的基本数据结构</h1><ul><li>sector: 扇区</li><li>block: F2FS的数据存储的基本单位是block，大小为4KB，整个flash设备被格式化为多个block组成的结构。很多数据结构也被设计为4KB的大小，这是因为很多flash设备单次IO的读写都是基于4KB的倍数进行。</li><li>segment: segment是管理block的结构，一个segment的大小是512个block，也就是2MB。</li><li>section: 默认情况下一个segment等于一个section，section是GC的基本操作单位，每次GC都会从section中选出特定的segment进行回收。F2FS将section分为了6类，分别是hot-node，warm-node，cold-node，hot-data，warm-data，cold-data，hot-&gt;cold表示了数据的从高到低的修改频率，通过不同类型的section，进行gc的时候可针对使用hot的section进行gc，以降低gc的时间开销。</li><li>zone: 默认情况一个zone等于一个section，与物理设备有关，大部分情况下用不上</li></ul><h1 id="f2fs-configuration结构体"><a href="#f2fs-configuration结构体" class="headerlink" title="f2fs_configuration结构体"></a>f2fs_configuration结构体</h1><p>f2fs_configuration结构体在include&#x2F;f2fs_fs.h文件中定义，f2fs文件系统初始化时默认参数也在include&#x2F;f2fs_fs.h文件中定义。在lib&#x2F;libf2fs.c的f2fs_init_configuration函数中进行初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">struct f2fs_configuration &#123;</span><br><span class="line">uint32_t reserved_segments;</span><br><span class="line">uint32_t new_reserved_segments;</span><br><span class="line">int sparse_mode;</span><br><span class="line">int zoned_mode;</span><br><span class="line">int zoned_model;</span><br><span class="line">size_t zone_blocks;</span><br><span class="line">double overprovision;</span><br><span class="line">double new_overprovision;</span><br><span class="line">uint32_t cur_seg[6];</span><br><span class="line">//一个section几个segment，默认为1个</span><br><span class="line">uint32_t segs_per_sec;</span><br><span class="line">//默认为1</span><br><span class="line">uint32_t secs_per_zone;</span><br><span class="line">//默认为1</span><br><span class="line">uint32_t segs_per_zone;</span><br><span class="line">uint32_t start_sector;</span><br><span class="line">uint32_t total_segments;</span><br><span class="line">uint32_t sector_size;</span><br><span class="line">uint64_t device_size;</span><br><span class="line">uint64_t total_sectors;</span><br><span class="line">uint64_t wanted_total_sectors;</span><br><span class="line">uint64_t wanted_sector_size;</span><br><span class="line">uint64_t target_sectors;</span><br><span class="line">uint64_t max_size;</span><br><span class="line">//一个block包含多少个扇区sector</span><br><span class="line">uint32_t sectors_per_blk;</span><br><span class="line">//一个segment包含多少个block</span><br><span class="line">uint32_t blks_per_seg;</span><br><span class="line">__u8 init_version[VERSION_LEN + 1];</span><br><span class="line">__u8 sb_version[VERSION_LEN + 1];</span><br><span class="line">__u8 version[VERSION_LEN + 1];</span><br><span class="line">char *vol_label;</span><br><span class="line">char *vol_uuid;</span><br><span class="line">uint16_t s_encoding;</span><br><span class="line">uint16_t s_encoding_flags;</span><br><span class="line">int heap;</span><br><span class="line">int32_t kd;</span><br><span class="line">int32_t dump_fd;</span><br><span class="line">//设备列表</span><br><span class="line">struct device_info devices[MAX_DEVICES];</span><br><span class="line">int ndevs;</span><br><span class="line">char *extension_list[2];</span><br><span class="line">const char *rootdev_name;</span><br><span class="line">int dbg_lv;</span><br><span class="line">int show_dentry;</span><br><span class="line">int trim;</span><br><span class="line">int trimmed;</span><br><span class="line">int func;</span><br><span class="line">void *private;</span><br><span class="line">int dry_run;</span><br><span class="line">//andorid 非内核运行检查</span><br><span class="line">int no_kernel_check;</span><br><span class="line">int fix_on;</span><br><span class="line">int force;</span><br><span class="line">int defset;</span><br><span class="line">int bug_on;</span><br><span class="line">int bug_nat_bits;</span><br><span class="line">bool quota_fixed;</span><br><span class="line">int alloc_failed;</span><br><span class="line">int auto_fix;</span><br><span class="line">int layout;</span><br><span class="line">int show_file_map;</span><br><span class="line">u64 show_file_map_max_offset;</span><br><span class="line">int quota_fix;</span><br><span class="line">int preen_mode;</span><br><span class="line">int ro;</span><br><span class="line">//andorid</span><br><span class="line">int preserve_limits;/* preserve quota limits */</span><br><span class="line">int large_nat_bitmap;</span><br><span class="line">int fix_chksum;/* fix old cp.chksum position */</span><br><span class="line">__le32 feature;/* defined features */</span><br><span class="line">unsigned int quota_bits;/* quota bits */</span><br><span class="line">time_t fixed_time;</span><br><span class="line"></span><br><span class="line">/* mkfs parameters */</span><br><span class="line">int fake_seed;</span><br><span class="line">uint32_t next_free_nid;</span><br><span class="line">uint32_t quota_inum;</span><br><span class="line">uint32_t quota_dnum;</span><br><span class="line">uint32_t lpf_inum;</span><br><span class="line">uint32_t lpf_dnum;</span><br><span class="line">uint32_t lpf_ino;</span><br><span class="line">uint32_t root_uid;</span><br><span class="line">uint32_t root_gid;</span><br><span class="line"></span><br><span class="line">/* defragmentation parameters */</span><br><span class="line">int defrag_shrink;</span><br><span class="line">uint64_t defrag_start;</span><br><span class="line">uint64_t defrag_len;</span><br><span class="line">uint64_t defrag_target;</span><br><span class="line"></span><br><span class="line">/* sload parameters */</span><br><span class="line">char *from_dir;</span><br><span class="line">char *mount_point;</span><br><span class="line">char *target_out_dir;</span><br><span class="line">char *fs_config_file;</span><br><span class="line">#ifdef HAVE_LIBSELINUX</span><br><span class="line">struct selinux_opt seopt_file[8];</span><br><span class="line">int nr_opt;</span><br><span class="line">#endif</span><br><span class="line">int preserve_perms;</span><br><span class="line"></span><br><span class="line">/* resize parameters */</span><br><span class="line">int safe_resize;</span><br><span class="line"></span><br><span class="line">/* precomputed fs UUID checksum for seeding other checksums */</span><br><span class="line">uint32_t chksum_seed;</span><br><span class="line"></span><br><span class="line">/* cache parameters */</span><br><span class="line">dev_cache_config_t cache_config;</span><br><span class="line"></span><br><span class="line">/* compression support for sload.f2fs */</span><br><span class="line">compress_config_t compress;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;f2fs的基本数据结构&quot;&gt;&lt;a href=&quot;#f2fs的基本数据结构&quot; class=&quot;headerlink&quot; title=&quot;f2fs的基本数据结构&quot;&gt;&lt;/a&gt;f2fs的基本数据结构&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;sector: 扇区&lt;/li&gt;
&lt;li&gt;block: F</summary>
      
    
    
    
    <category term="f2fs" scheme="http://zt-winter.github.io/categories/f2fs/"/>
    
    
    <category term="f2fs" scheme="http://zt-winter.github.io/tags/f2fs/"/>
    
  </entry>
  
  <entry>
    <title>内存管理</title>
    <link href="http://zt-winter.github.io/2022/06/21/%E5%86%85%E5%AD%98/"/>
    <id>http://zt-winter.github.io/2022/06/21/%E5%86%85%E5%AD%98/</id>
    <published>2022-06-20T16:00:00.000Z</published>
    <updated>2025-05-19T05:41:26.969Z</updated>
    
    <content type="html"><![CDATA[<p>一般来说函数调用的参数、返回值、局部变量都会被分配到栈上。但golang是静态语言，在编译过程中，编译器会做逃逸分析，如果发现在函数外部有对应的指针指向这些值时，这些值会被分配到堆上，在函数结束后保留，由golang的垃圾回收机制决定何时回收。</p><h3 id="堆的内存管理"><a href="#堆的内存管理" class="headerlink" title="堆的内存管理"></a>堆的内存管理</h3><p>内存管理一般包含三个不同的组件,分别是用户程序（Mutatur），分配器（allocator）和收集器（Collector），当用户程序申请内存时，它会通过内存分配器申请新内存，而分配器会负责从堆中初始化相应的内存区域。</p><p>堆的内存分配策略：该策略会将内存分割成由4、8、16、32字节的内存块组成的链表，根据申请内存大小，找到满足条件的链表，再从链表中选择合适的内存块。</p><h3 id="栈的内存管理"><a href="#栈的内存管理" class="headerlink" title="栈的内存管理"></a>栈的内存管理</h3><p>目前需要注意的一点是，函数参数是放在栈中的。而放入的一个slice时，栈的内存分配是按照size分配，而slice可能cap大于size。如果出现append(sliceone, elem)的情况，可能会覆盖sliceone后面的参数，造成数据错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">func CombineIPPort(addressA net.IP, addressAPort uint16, addressB net.IP, addressBPort uint16) []byte &#123;</span><br><span class="line">lengthA := len(addressA)</span><br><span class="line">lengthB := len(addressB)</span><br><span class="line">fmt.Println(addressA[0], addressB[0])</span><br><span class="line">var flag bool</span><br><span class="line">for i := 0; i &lt; lengthA &amp;&amp; i &lt; lengthB; i++ &#123;</span><br><span class="line">if addressA[i] &lt; addressB[i] &#123;</span><br><span class="line">flag = true</span><br><span class="line">break</span><br><span class="line">&#125; else if addressA[i] &gt; addressB[i] &#123;</span><br><span class="line">flag = false</span><br><span class="line">break</span><br><span class="line">&#125; else &#123;</span><br><span class="line">if i == lengthA - 1 &#123;</span><br><span class="line">flag = true</span><br><span class="line">&#125; else if i == lengthB - 1 &#123;</span><br><span class="line">flag = false</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">var newAddress []byte</span><br><span class="line">fmt.Println(flag)</span><br><span class="line">fmt.Println(addressA)</span><br><span class="line">fmt.Println(cap(addressA))</span><br><span class="line">if flag &#123;</span><br><span class="line">print(addressA)</span><br><span class="line">print(addressB)</span><br><span class="line">//这里就会出现问题</span><br><span class="line">newAddress = append(addressA, uint16ToBytes(addressAPort)...)</span><br><span class="line">print(newAddress)</span><br><span class="line">newAddress = append(newAddress, addressB...)</span><br><span class="line">newAddress = append(newAddress, uint16ToBytes(addressBPort)...)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">newAddress = append(addressB, uint16ToBytes(addressBPort)...)</span><br><span class="line">newAddress = append(newAddress, addressA...)</span><br><span class="line">newAddress = append(newAddress, uint16ToBytes(addressAPort)...)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(newAddress)</span><br><span class="line">return newAddress</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一般来说函数调用的参数、返回值、局部变量都会被分配到栈上。但golang是静态语言，在编译过程中，编译器会做逃逸分析，如果发现在函数外部有对应的指针指向这些值时，这些值会被分配到堆上，在函数结束后保留，由golang的垃圾回收机制决定何时回收。&lt;/p&gt;
&lt;h3 id=&quot;堆的</summary>
      
    
    
    
    <category term="go" scheme="http://zt-winter.github.io/categories/go/"/>
    
    
    <category term="内存管理" scheme="http://zt-winter.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>反射</title>
    <link href="http://zt-winter.github.io/2022/06/13/reflect/"/>
    <id>http://zt-winter.github.io/2022/06/13/reflect/</id>
    <published>2022-06-12T16:00:00.000Z</published>
    <updated>2025-05-19T05:41:26.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="reflect"><a href="#reflect" class="headerlink" title="reflect"></a>reflect</h1><p>反射是指在程序运行时对程序本身的进行访问和修改的能力。</p><h2 id="type和value"><a href="#type和value" class="headerlink" title="type和value"></a>type和value</h2><p>在golang中对所有的接口反射，都可以得到type和value。而golang中任意数据结构都实现了空接口,也就是说任意数据结构都有reflectt.type和reflect.value。<br>reflect.type表示一个数据结构的类型，这个类型的各种基本信息。reflect.value则表示了运行过程中，该数据结构类型的一个具体实现的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">type test struct&#123;</span><br><span class="line">a int</span><br><span class="line">b string</span><br><span class="line">c map[int]int</span><br><span class="line">d *test</span><br><span class="line">&#125;</span><br><span class="line">a := new(test)</span><br><span class="line">aT := reflect.Typeof(a)</span><br><span class="line">aV := reflect.Valueof(a)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*main.test</span><br><span class="line">0x47e1c0</span><br></pre></td></tr></table></figure><p><a href="https://pkg.go.dev/reflect@go1.18.3#Type">type接口的函数</a></p><p><a href="https://cs.opensource.google/go/go/+/refs/tags/go1.18.3:src/reflect/value.go;l=39">value结构体定义</a></p><p>type和value的相关函数都在前面两处文档中有详细说明，这里不在赘述。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;reflect&quot;&gt;&lt;a href=&quot;#reflect&quot; class=&quot;headerlink&quot; title=&quot;reflect&quot;&gt;&lt;/a&gt;reflect&lt;/h1&gt;&lt;p&gt;反射是指在程序运行时对程序本身的进行访问和修改的能力。&lt;/p&gt;
&lt;h2 id=&quot;type和value</summary>
      
    
    
    
    <category term="go" scheme="http://zt-winter.github.io/categories/go/"/>
    
    
    <category term="reflect" scheme="http://zt-winter.github.io/tags/reflect/"/>
    
  </entry>
  
</feed>
